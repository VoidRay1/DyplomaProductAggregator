INFO 2024-03-14 12:24:18,100 autoreload 25456 20624 Watching for file changes with StatReloader
INFO 2024-03-14 12:27:38,133 autoreload 19128 23728 Watching for file changes with StatReloader
INFO 2024-03-14 12:28:37,306 autoreload 1248 9260 Watching for file changes with StatReloader
INFO 2024-03-14 12:30:34,729 autoreload 22548 15896 Watching for file changes with StatReloader
INFO 2024-03-14 12:32:10,585 autoreload 17144 8128 Watching for file changes with StatReloader
INFO 2024-03-14 12:37:14,726 autoreload 17144 8128 C:\Users\Sergey Trosenko\DyplomaProductAggregator\backend\backend\settings.py changed, reloading.
INFO 2024-03-14 12:37:16,027 autoreload 12480 24648 Watching for file changes with StatReloader
INFO 2024-03-14 13:18:32,248 autoreload 7452 19812 Watching for file changes with StatReloader
INFO 2024-03-18 21:12:43,109 autoreload 19044 1912 Watching for file changes with StatReloader
INFO 2024-03-18 21:22:01,634 autoreload 960 5332 Watching for file changes with StatReloader
DEBUG 2024-03-18 21:28:41,697 functional 7956 17332 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

DEBUG 2024-03-18 21:28:41,698 functional 7956 17332 
def xmap(task, it):
    return 1

DEBUG 2024-03-18 21:28:41,699 functional 7956 17332 
def backend_cleanup():
    return 1

DEBUG 2024-03-18 21:28:41,699 functional 7956 17332 
def chain(*args, **kwargs):
    return 1

DEBUG 2024-03-18 21:28:41,700 functional 7956 17332 
def xstarmap(task, it):
    return 1

DEBUG 2024-03-18 21:28:41,700 functional 7956 17332 
def accumulate(self, *args, **kwargs):
    return 1

DEBUG 2024-03-18 21:28:41,701 functional 7956 17332 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

DEBUG 2024-03-18 21:28:41,701 functional 7956 17332 
def chunks(task, it, n):
    return 1

DEBUG 2024-03-18 21:28:41,702 functional 7956 17332 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

INFO 2024-03-18 21:31:10,111 autoreload 22372 23560 Watching for file changes with StatReloader
DEBUG 2024-03-18 22:18:02,471 functional 24588 7204 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

DEBUG 2024-03-18 22:18:02,472 functional 24588 7204 
def xmap(task, it):
    return 1

DEBUG 2024-03-18 22:18:02,473 functional 24588 7204 
def backend_cleanup():
    return 1

DEBUG 2024-03-18 22:18:02,473 functional 24588 7204 
def chain(*args, **kwargs):
    return 1

DEBUG 2024-03-18 22:18:02,474 functional 24588 7204 
def xstarmap(task, it):
    return 1

DEBUG 2024-03-18 22:18:02,474 functional 24588 7204 
def accumulate(self, *args, **kwargs):
    return 1

DEBUG 2024-03-18 22:18:02,475 functional 24588 7204 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

DEBUG 2024-03-18 22:18:02,475 functional 24588 7204 
def chunks(task, it, n):
    return 1

DEBUG 2024-03-18 22:18:02,476 functional 24588 7204 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

DEBUG 2024-03-18 22:24:43,050 functional 13996 22172 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

DEBUG 2024-03-18 22:24:43,051 functional 13996 22172 
def xmap(task, it):
    return 1

DEBUG 2024-03-18 22:24:43,051 functional 13996 22172 
def backend_cleanup():
    return 1

DEBUG 2024-03-18 22:24:43,052 functional 13996 22172 
def chain(*args, **kwargs):
    return 1

DEBUG 2024-03-18 22:24:43,053 functional 13996 22172 
def xstarmap(task, it):
    return 1

DEBUG 2024-03-18 22:24:43,053 functional 13996 22172 
def accumulate(self, *args, **kwargs):
    return 1

DEBUG 2024-03-18 22:24:43,054 functional 13996 22172 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

DEBUG 2024-03-18 22:24:43,054 functional 13996 22172 
def chunks(task, it, n):
    return 1

DEBUG 2024-03-18 22:24:43,055 functional 13996 22172 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

DEBUG 2024-03-18 22:26:40,581 functional 25196 21204 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

DEBUG 2024-03-18 22:26:40,581 functional 25196 21204 
def xmap(task, it):
    return 1

DEBUG 2024-03-18 22:26:40,582 functional 25196 21204 
def backend_cleanup():
    return 1

DEBUG 2024-03-18 22:26:40,583 functional 25196 21204 
def chain(*args, **kwargs):
    return 1

DEBUG 2024-03-18 22:26:40,583 functional 25196 21204 
def xstarmap(task, it):
    return 1

DEBUG 2024-03-18 22:26:40,584 functional 25196 21204 
def accumulate(self, *args, **kwargs):
    return 1

DEBUG 2024-03-18 22:26:40,584 functional 25196 21204 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

DEBUG 2024-03-18 22:26:40,585 functional 25196 21204 
def chunks(task, it, n):
    return 1

DEBUG 2024-03-18 22:26:40,586 functional 25196 21204 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

DEBUG 2024-03-18 22:28:06,373 functional 12956 580 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

DEBUG 2024-03-18 22:28:06,374 functional 12956 580 
def xmap(task, it):
    return 1

DEBUG 2024-03-18 22:28:06,374 functional 12956 580 
def backend_cleanup():
    return 1

DEBUG 2024-03-18 22:28:06,375 functional 12956 580 
def chain(*args, **kwargs):
    return 1

DEBUG 2024-03-18 22:28:06,375 functional 12956 580 
def xstarmap(task, it):
    return 1

DEBUG 2024-03-18 22:28:06,376 functional 12956 580 
def accumulate(self, *args, **kwargs):
    return 1

DEBUG 2024-03-18 22:28:06,376 functional 12956 580 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

DEBUG 2024-03-18 22:28:06,377 functional 12956 580 
def chunks(task, it, n):
    return 1

DEBUG 2024-03-18 22:28:06,378 functional 12956 580 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

DEBUG 2024-03-18 22:31:41,715 functional 17440 9700 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

DEBUG 2024-03-18 22:31:41,716 functional 17440 9700 
def xmap(task, it):
    return 1

DEBUG 2024-03-18 22:31:41,716 functional 17440 9700 
def backend_cleanup():
    return 1

DEBUG 2024-03-18 22:31:41,717 functional 17440 9700 
def chain(*args, **kwargs):
    return 1

DEBUG 2024-03-18 22:31:41,717 functional 17440 9700 
def xstarmap(task, it):
    return 1

DEBUG 2024-03-18 22:31:41,718 functional 17440 9700 
def accumulate(self, *args, **kwargs):
    return 1

DEBUG 2024-03-18 22:31:41,718 functional 17440 9700 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

DEBUG 2024-03-18 22:31:41,719 functional 17440 9700 
def chunks(task, it, n):
    return 1

DEBUG 2024-03-18 22:31:41,719 functional 17440 9700 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

DEBUG 2024-03-18 22:31:51,686 functional 8240 11040 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

DEBUG 2024-03-18 22:31:51,686 functional 8240 11040 
def xmap(task, it):
    return 1

DEBUG 2024-03-18 22:31:51,687 functional 8240 11040 
def backend_cleanup():
    return 1

DEBUG 2024-03-18 22:31:51,688 functional 8240 11040 
def chain(*args, **kwargs):
    return 1

DEBUG 2024-03-18 22:31:51,688 functional 8240 11040 
def xstarmap(task, it):
    return 1

DEBUG 2024-03-18 22:31:51,689 functional 8240 11040 
def accumulate(self, *args, **kwargs):
    return 1

DEBUG 2024-03-18 22:31:51,689 functional 8240 11040 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

DEBUG 2024-03-18 22:31:51,690 functional 8240 11040 
def chunks(task, it, n):
    return 1

DEBUG 2024-03-18 22:31:51,691 functional 8240 11040 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

DEBUG 2024-03-18 22:37:59,139 functional 13476 1356 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

DEBUG 2024-03-18 22:37:59,140 functional 13476 1356 
def xmap(task, it):
    return 1

DEBUG 2024-03-18 22:37:59,140 functional 13476 1356 
def backend_cleanup():
    return 1

DEBUG 2024-03-18 22:37:59,141 functional 13476 1356 
def chain(*args, **kwargs):
    return 1

DEBUG 2024-03-18 22:37:59,141 functional 13476 1356 
def xstarmap(task, it):
    return 1

DEBUG 2024-03-18 22:37:59,142 functional 13476 1356 
def accumulate(self, *args, **kwargs):
    return 1

DEBUG 2024-03-18 22:37:59,142 functional 13476 1356 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

DEBUG 2024-03-18 22:37:59,143 functional 13476 1356 
def chunks(task, it, n):
    return 1

DEBUG 2024-03-18 22:37:59,143 functional 13476 1356 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

DEBUG 2024-03-18 22:38:08,145 functional 1600 19536 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

DEBUG 2024-03-18 22:38:08,145 functional 1600 19536 
def xmap(task, it):
    return 1

DEBUG 2024-03-18 22:38:08,146 functional 1600 19536 
def backend_cleanup():
    return 1

DEBUG 2024-03-18 22:38:08,147 functional 1600 19536 
def chain(*args, **kwargs):
    return 1

DEBUG 2024-03-18 22:38:08,147 functional 1600 19536 
def xstarmap(task, it):
    return 1

DEBUG 2024-03-18 22:38:08,148 functional 1600 19536 
def accumulate(self, *args, **kwargs):
    return 1

DEBUG 2024-03-18 22:38:08,148 functional 1600 19536 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

DEBUG 2024-03-18 22:38:08,149 functional 1600 19536 
def chunks(task, it, n):
    return 1

DEBUG 2024-03-18 22:38:08,149 functional 1600 19536 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

INFO 2024-03-18 22:38:42,481 autoreload 22372 23560 C:\Users\Sergey Trosenko\DyplomaProductAggregator\backend\backend\settings.py changed, reloading.
INFO 2024-03-18 22:38:44,527 autoreload 24900 2100 Watching for file changes with StatReloader
DEBUG 2024-03-18 22:38:56,094 functional 17380 25416 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

DEBUG 2024-03-18 22:38:56,095 functional 17380 25416 
def xmap(task, it):
    return 1

DEBUG 2024-03-18 22:38:56,096 functional 17380 25416 
def backend_cleanup():
    return 1

DEBUG 2024-03-18 22:38:56,096 functional 17380 25416 
def chain(*args, **kwargs):
    return 1

DEBUG 2024-03-18 22:38:56,097 functional 17380 25416 
def xstarmap(task, it):
    return 1

DEBUG 2024-03-18 22:38:56,097 functional 17380 25416 
def accumulate(self, *args, **kwargs):
    return 1

DEBUG 2024-03-18 22:38:56,098 functional 17380 25416 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

DEBUG 2024-03-18 22:38:56,098 functional 17380 25416 
def chunks(task, it, n):
    return 1

DEBUG 2024-03-18 22:38:56,099 functional 17380 25416 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

INFO 2024-03-18 22:39:30,724 autoreload 24900 2100 C:\Users\Sergey Trosenko\DyplomaProductAggregator\backend\backend\settings.py changed, reloading.
INFO 2024-03-18 22:39:32,559 autoreload 11256 23076 Watching for file changes with StatReloader
DEBUG 2024-03-18 22:39:35,353 functional 24728 5332 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

DEBUG 2024-03-18 22:39:35,354 functional 24728 5332 
def xmap(task, it):
    return 1

DEBUG 2024-03-18 22:39:35,355 functional 24728 5332 
def backend_cleanup():
    return 1

DEBUG 2024-03-18 22:39:35,355 functional 24728 5332 
def chain(*args, **kwargs):
    return 1

DEBUG 2024-03-18 22:39:35,356 functional 24728 5332 
def xstarmap(task, it):
    return 1

DEBUG 2024-03-18 22:39:35,356 functional 24728 5332 
def accumulate(self, *args, **kwargs):
    return 1

DEBUG 2024-03-18 22:39:35,357 functional 24728 5332 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

DEBUG 2024-03-18 22:39:35,357 functional 24728 5332 
def chunks(task, it, n):
    return 1

DEBUG 2024-03-18 22:39:35,358 functional 24728 5332 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

DEBUG 2024-03-18 22:40:13,434 functional 9668 11320 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

DEBUG 2024-03-18 22:40:13,435 functional 9668 11320 
def xmap(task, it):
    return 1

DEBUG 2024-03-18 22:40:13,435 functional 9668 11320 
def backend_cleanup():
    return 1

DEBUG 2024-03-18 22:40:13,436 functional 9668 11320 
def chain(*args, **kwargs):
    return 1

DEBUG 2024-03-18 22:40:13,437 functional 9668 11320 
def xstarmap(task, it):
    return 1

DEBUG 2024-03-18 22:40:13,437 functional 9668 11320 
def accumulate(self, *args, **kwargs):
    return 1

DEBUG 2024-03-18 22:40:13,438 functional 9668 11320 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

DEBUG 2024-03-18 22:40:13,438 functional 9668 11320 
def chunks(task, it, n):
    return 1

DEBUG 2024-03-18 22:40:13,439 functional 9668 11320 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

INFO 2024-03-18 22:40:25,309 autoreload 11256 23076 C:\Users\Sergey Trosenko\DyplomaProductAggregator\backend\backend\settings.py changed, reloading.
INFO 2024-03-18 22:40:27,157 autoreload 18732 24540 Watching for file changes with StatReloader
DEBUG 2024-03-18 22:40:29,289 functional 8712 24844 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

DEBUG 2024-03-18 22:40:29,289 functional 8712 24844 
def xmap(task, it):
    return 1

DEBUG 2024-03-18 22:40:29,290 functional 8712 24844 
def backend_cleanup():
    return 1

DEBUG 2024-03-18 22:40:29,290 functional 8712 24844 
def chain(*args, **kwargs):
    return 1

DEBUG 2024-03-18 22:40:29,291 functional 8712 24844 
def xstarmap(task, it):
    return 1

DEBUG 2024-03-18 22:40:29,291 functional 8712 24844 
def accumulate(self, *args, **kwargs):
    return 1

DEBUG 2024-03-18 22:40:29,292 functional 8712 24844 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

DEBUG 2024-03-18 22:40:29,293 functional 8712 24844 
def chunks(task, it, n):
    return 1

DEBUG 2024-03-18 22:40:29,294 functional 8712 24844 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

INFO 2024-03-19 12:37:16,075 autoreload 21832 25356 Watching for file changes with StatReloader
DEBUG 2024-03-19 12:38:01,657 functional 17304 7796 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

DEBUG 2024-03-19 12:38:01,658 functional 17304 7796 
def xmap(task, it):
    return 1

DEBUG 2024-03-19 12:38:01,658 functional 17304 7796 
def backend_cleanup():
    return 1

DEBUG 2024-03-19 12:38:01,659 functional 17304 7796 
def chain(*args, **kwargs):
    return 1

DEBUG 2024-03-19 12:38:01,659 functional 17304 7796 
def xstarmap(task, it):
    return 1

DEBUG 2024-03-19 12:38:01,660 functional 17304 7796 
def accumulate(self, *args, **kwargs):
    return 1

DEBUG 2024-03-19 12:38:01,661 functional 17304 7796 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

DEBUG 2024-03-19 12:38:01,661 functional 17304 7796 
def chunks(task, it, n):
    return 1

DEBUG 2024-03-19 12:38:01,662 functional 17304 7796 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

DEBUG 2024-03-19 12:38:44,072 functional 10508 18836 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

DEBUG 2024-03-19 12:38:44,073 functional 10508 18836 
def xmap(task, it):
    return 1

DEBUG 2024-03-19 12:38:44,073 functional 10508 18836 
def backend_cleanup():
    return 1

DEBUG 2024-03-19 12:38:44,074 functional 10508 18836 
def chain(*args, **kwargs):
    return 1

DEBUG 2024-03-19 12:38:44,074 functional 10508 18836 
def xstarmap(task, it):
    return 1

DEBUG 2024-03-19 12:38:44,075 functional 10508 18836 
def accumulate(self, *args, **kwargs):
    return 1

DEBUG 2024-03-19 12:38:44,076 functional 10508 18836 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

DEBUG 2024-03-19 12:38:44,076 functional 10508 18836 
def chunks(task, it, n):
    return 1

DEBUG 2024-03-19 12:38:44,077 functional 10508 18836 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

DEBUG 2024-03-19 12:41:42,907 functional 4560 23572 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

DEBUG 2024-03-19 12:41:42,908 functional 4560 23572 
def xmap(task, it):
    return 1

DEBUG 2024-03-19 12:41:42,908 functional 4560 23572 
def backend_cleanup():
    return 1

DEBUG 2024-03-19 12:41:42,909 functional 4560 23572 
def chain(*args, **kwargs):
    return 1

DEBUG 2024-03-19 12:41:42,909 functional 4560 23572 
def xstarmap(task, it):
    return 1

DEBUG 2024-03-19 12:41:42,910 functional 4560 23572 
def accumulate(self, *args, **kwargs):
    return 1

DEBUG 2024-03-19 12:41:42,910 functional 4560 23572 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

DEBUG 2024-03-19 12:41:42,911 functional 4560 23572 
def chunks(task, it, n):
    return 1

DEBUG 2024-03-19 12:41:42,912 functional 4560 23572 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

DEBUG 2024-03-19 12:50:25,408 GetText 21832 10508 Failed to find locale Russian_Ukraine
DEBUG 2024-03-19 12:50:25,414 GetText 21832 10508 Attempting to load en_US as fallback
DEBUG 2024-03-19 12:50:25,441 GetText 21832 10508 c:\Users\Sergey Trosenko\DyplomaProductAggregator\.venv\Lib\site-packages\cron_descriptor\locale\en_US.mo Loaded
DEBUG 2024-03-19 12:50:25,444 GetText 21832 10508 Failed to find locale Russian_Ukraine
DEBUG 2024-03-19 12:50:25,450 GetText 21832 10508 Attempting to load en_US as fallback
DEBUG 2024-03-19 12:50:25,464 GetText 21832 10508 c:\Users\Sergey Trosenko\DyplomaProductAggregator\.venv\Lib\site-packages\cron_descriptor\locale\en_US.mo Loaded
DEBUG 2024-03-19 12:50:25,632 functional 21832 10508 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

DEBUG 2024-03-19 12:50:25,638 functional 21832 10508 
def chunks(task, it, n):
    return 1

DEBUG 2024-03-19 12:50:25,645 functional 21832 10508 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

DEBUG 2024-03-19 12:50:25,651 functional 21832 10508 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

DEBUG 2024-03-19 12:50:25,656 functional 21832 10508 
def xmap(task, it):
    return 1

DEBUG 2024-03-19 12:50:25,658 functional 21832 10508 
def backend_cleanup():
    return 1

DEBUG 2024-03-19 12:50:25,664 functional 21832 10508 
def chain(*args, **kwargs):
    return 1

DEBUG 2024-03-19 12:50:25,671 functional 21832 10508 
def xstarmap(task, it):
    return 1

DEBUG 2024-03-19 12:50:25,675 functional 21832 10508 
def accumulate(self, *args, **kwargs):
    return 1

INFO 2024-03-19 12:52:54,340 autoreload 19380 22696 Watching for file changes with StatReloader
ERROR 2024-03-19 12:53:04,502 exception 19380 9096 The number of GET/POST parameters exceeded settings.DATA_UPLOAD_MAX_NUMBER_FIELDS.
Traceback (most recent call last):
  File "c:\Users\Sergey Trosenko\DyplomaProductAggregator\.venv\Lib\site-packages\django\http\request.py", line 531, in __init__
    for key, value in parse_qsl(query_string, **parse_qsl_kwargs):
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\Sergey Trosenko\AppData\Local\Programs\Python\Python312\Lib\urllib\parse.py", line 778, in parse_qsl
    raise ValueError('Max number of fields exceeded')
ValueError: Max number of fields exceeded

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "c:\Users\Sergey Trosenko\DyplomaProductAggregator\.venv\Lib\site-packages\django\core\handlers\exception.py", line 55, in inner
    response = get_response(request)
               ^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\Sergey Trosenko\DyplomaProductAggregator\.venv\Lib\site-packages\django\core\handlers\base.py", line 185, in _get_response
    response = middleware_method(
               ^^^^^^^^^^^^^^^^^^
  File "c:\Users\Sergey Trosenko\DyplomaProductAggregator\.venv\Lib\site-packages\django\middleware\csrf.py", line 470, in process_view
    self._check_token(request)
  File "c:\Users\Sergey Trosenko\DyplomaProductAggregator\.venv\Lib\site-packages\django\middleware\csrf.py", line 373, in _check_token
    request_csrf_token = request.POST.get("csrfmiddlewaretoken", "")
                         ^^^^^^^^^^^^
  File "c:\Users\Sergey Trosenko\DyplomaProductAggregator\.venv\Lib\site-packages\django\core\handlers\wsgi.py", line 103, in _get_post
    self._load_post_and_files()
  File "c:\Users\Sergey Trosenko\DyplomaProductAggregator\.venv\Lib\site-packages\django\http\request.py", line 400, in _load_post_and_files
    QueryDict(self.body, encoding=self._encoding),
    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\Sergey Trosenko\DyplomaProductAggregator\.venv\Lib\site-packages\django\http\request.py", line 538, in __init__
    raise TooManyFieldsSent(
django.core.exceptions.TooManyFieldsSent: The number of GET/POST parameters exceeded settings.DATA_UPLOAD_MAX_NUMBER_FIELDS.
ERROR 2024-03-19 12:58:35,688 exception 19380 17104 The number of GET/POST parameters exceeded settings.DATA_UPLOAD_MAX_NUMBER_FIELDS.
Traceback (most recent call last):
  File "c:\Users\Sergey Trosenko\DyplomaProductAggregator\.venv\Lib\site-packages\django\http\request.py", line 531, in __init__
    for key, value in parse_qsl(query_string, **parse_qsl_kwargs):
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\Sergey Trosenko\AppData\Local\Programs\Python\Python312\Lib\urllib\parse.py", line 778, in parse_qsl
    raise ValueError('Max number of fields exceeded')
ValueError: Max number of fields exceeded

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "c:\Users\Sergey Trosenko\DyplomaProductAggregator\.venv\Lib\site-packages\django\core\handlers\exception.py", line 55, in inner
    response = get_response(request)
               ^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\Sergey Trosenko\DyplomaProductAggregator\.venv\Lib\site-packages\django\core\handlers\base.py", line 185, in _get_response
    response = middleware_method(
               ^^^^^^^^^^^^^^^^^^
  File "c:\Users\Sergey Trosenko\DyplomaProductAggregator\.venv\Lib\site-packages\django\middleware\csrf.py", line 470, in process_view
    self._check_token(request)
  File "c:\Users\Sergey Trosenko\DyplomaProductAggregator\.venv\Lib\site-packages\django\middleware\csrf.py", line 373, in _check_token
    request_csrf_token = request.POST.get("csrfmiddlewaretoken", "")
                         ^^^^^^^^^^^^
  File "c:\Users\Sergey Trosenko\DyplomaProductAggregator\.venv\Lib\site-packages\django\core\handlers\wsgi.py", line 103, in _get_post
    self._load_post_and_files()
  File "c:\Users\Sergey Trosenko\DyplomaProductAggregator\.venv\Lib\site-packages\django\http\request.py", line 400, in _load_post_and_files
    QueryDict(self.body, encoding=self._encoding),
    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\Sergey Trosenko\DyplomaProductAggregator\.venv\Lib\site-packages\django\http\request.py", line 538, in __init__
    raise TooManyFieldsSent(
django.core.exceptions.TooManyFieldsSent: The number of GET/POST parameters exceeded settings.DATA_UPLOAD_MAX_NUMBER_FIELDS.
INFO 2024-03-19 12:59:02,813 autoreload 19380 22696 C:\Users\Sergey Trosenko\DyplomaProductAggregator\backend\backend\settings.py changed, reloading.
INFO 2024-03-19 12:59:06,434 autoreload 3252 8688 Watching for file changes with StatReloader
DEBUG 2024-03-19 13:04:44,098 functional 24692 24860 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

DEBUG 2024-03-19 13:04:44,099 functional 24692 24860 
def xmap(task, it):
    return 1

DEBUG 2024-03-19 13:04:44,099 functional 24692 24860 
def backend_cleanup():
    return 1

DEBUG 2024-03-19 13:04:44,100 functional 24692 24860 
def chain(*args, **kwargs):
    return 1

DEBUG 2024-03-19 13:04:44,100 functional 24692 24860 
def xstarmap(task, it):
    return 1

DEBUG 2024-03-19 13:04:44,101 functional 24692 24860 
def accumulate(self, *args, **kwargs):
    return 1

DEBUG 2024-03-19 13:04:44,101 functional 24692 24860 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

DEBUG 2024-03-19 13:04:44,102 functional 24692 24860 
def chunks(task, it, n):
    return 1

DEBUG 2024-03-19 13:04:44,103 functional 24692 24860 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

DEBUG 2024-03-19 13:05:00,376 GetText 3252 15920 Failed to find locale Russian_Ukraine
DEBUG 2024-03-19 13:05:00,376 GetText 3252 15920 Attempting to load en_US as fallback
DEBUG 2024-03-19 13:05:00,377 GetText 3252 15920 c:\Users\Sergey Trosenko\DyplomaProductAggregator\.venv\Lib\site-packages\cron_descriptor\locale\en_US.mo Loaded
DEBUG 2024-03-19 13:05:00,378 GetText 3252 15920 Failed to find locale Russian_Ukraine
DEBUG 2024-03-19 13:05:00,378 GetText 3252 15920 Attempting to load en_US as fallback
DEBUG 2024-03-19 13:05:00,379 GetText 3252 15920 c:\Users\Sergey Trosenko\DyplomaProductAggregator\.venv\Lib\site-packages\cron_descriptor\locale\en_US.mo Loaded
DEBUG 2024-03-19 13:05:00,396 functional 3252 15920 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

DEBUG 2024-03-19 13:05:00,397 functional 3252 15920 
def chunks(task, it, n):
    return 1

DEBUG 2024-03-19 13:05:00,397 functional 3252 15920 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

DEBUG 2024-03-19 13:05:00,398 functional 3252 15920 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

DEBUG 2024-03-19 13:05:00,398 functional 3252 15920 
def xmap(task, it):
    return 1

DEBUG 2024-03-19 13:05:00,399 functional 3252 15920 
def backend_cleanup():
    return 1

DEBUG 2024-03-19 13:05:00,399 functional 3252 15920 
def chain(*args, **kwargs):
    return 1

DEBUG 2024-03-19 13:05:00,400 functional 3252 15920 
def xstarmap(task, it):
    return 1

DEBUG 2024-03-19 13:05:00,400 functional 3252 15920 
def accumulate(self, *args, **kwargs):
    return 1

DEBUG 2024-03-19 13:05:05,082 GetText 3252 15920 Failed to find locale Russian_Ukraine
DEBUG 2024-03-19 13:05:05,082 GetText 3252 15920 Attempting to load en_US as fallback
DEBUG 2024-03-19 13:05:05,083 GetText 3252 15920 c:\Users\Sergey Trosenko\DyplomaProductAggregator\.venv\Lib\site-packages\cron_descriptor\locale\en_US.mo Loaded
DEBUG 2024-03-19 13:05:05,083 GetText 3252 15920 Failed to find locale Russian_Ukraine
DEBUG 2024-03-19 13:05:05,084 GetText 3252 15920 Attempting to load en_US as fallback
DEBUG 2024-03-19 13:05:05,084 GetText 3252 15920 c:\Users\Sergey Trosenko\DyplomaProductAggregator\.venv\Lib\site-packages\cron_descriptor\locale\en_US.mo Loaded
INFO 2024-03-19 13:08:56,241 autoreload 3252 8688 C:\Users\Sergey Trosenko\DyplomaProductAggregator\backend\backend\settings.py changed, reloading.
INFO 2024-03-19 13:08:59,750 autoreload 16012 23204 Watching for file changes with StatReloader
DEBUG 2024-03-19 13:09:08,268 functional 14376 19544 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

DEBUG 2024-03-19 13:09:08,269 functional 14376 19544 
def xmap(task, it):
    return 1

DEBUG 2024-03-19 13:09:08,270 functional 14376 19544 
def backend_cleanup():
    return 1

DEBUG 2024-03-19 13:09:08,270 functional 14376 19544 
def chain(*args, **kwargs):
    return 1

DEBUG 2024-03-19 13:09:08,271 functional 14376 19544 
def xstarmap(task, it):
    return 1

DEBUG 2024-03-19 13:09:08,271 functional 14376 19544 
def accumulate(self, *args, **kwargs):
    return 1

DEBUG 2024-03-19 13:09:08,272 functional 14376 19544 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

DEBUG 2024-03-19 13:09:08,272 functional 14376 19544 
def chunks(task, it, n):
    return 1

DEBUG 2024-03-19 13:09:08,273 functional 14376 19544 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

DEBUG 2024-03-19 13:14:24,968 functional 5104 21292 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

DEBUG 2024-03-19 13:14:24,969 functional 5104 21292 
def xmap(task, it):
    return 1

DEBUG 2024-03-19 13:14:24,970 functional 5104 21292 
def get_rozetka_products():
    return 1

DEBUG 2024-03-19 13:14:24,970 functional 5104 21292 
def backend_cleanup():
    return 1

DEBUG 2024-03-19 13:14:24,971 functional 5104 21292 
def chain(*args, **kwargs):
    return 1

DEBUG 2024-03-19 13:14:24,971 functional 5104 21292 
def xstarmap(task, it):
    return 1

DEBUG 2024-03-19 13:14:24,972 functional 5104 21292 
def accumulate(self, *args, **kwargs):
    return 1

DEBUG 2024-03-19 13:14:24,972 functional 5104 21292 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

DEBUG 2024-03-19 13:14:24,973 functional 5104 21292 
def chunks(task, it, n):
    return 1

DEBUG 2024-03-19 13:14:24,973 functional 5104 21292 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

DEBUG 2024-03-19 13:14:24,974 functional 5104 21292 
def get_silpo_products():
    return 1

DEBUG 2024-03-19 13:16:33,286 GetText 16012 11296 Failed to find locale Russian_Ukraine
DEBUG 2024-03-19 13:16:33,287 GetText 16012 11296 Attempting to load en_US as fallback
DEBUG 2024-03-19 13:16:33,287 GetText 16012 11296 c:\Users\Sergey Trosenko\DyplomaProductAggregator\.venv\Lib\site-packages\cron_descriptor\locale\en_US.mo Loaded
DEBUG 2024-03-19 13:16:33,288 GetText 16012 11296 Failed to find locale Russian_Ukraine
DEBUG 2024-03-19 13:16:33,288 GetText 16012 11296 Attempting to load en_US as fallback
DEBUG 2024-03-19 13:16:33,289 GetText 16012 11296 c:\Users\Sergey Trosenko\DyplomaProductAggregator\.venv\Lib\site-packages\cron_descriptor\locale\en_US.mo Loaded
DEBUG 2024-03-19 13:16:33,305 functional 16012 11296 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

DEBUG 2024-03-19 13:16:33,305 functional 16012 11296 
def chunks(task, it, n):
    return 1

DEBUG 2024-03-19 13:16:33,306 functional 16012 11296 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

DEBUG 2024-03-19 13:16:33,306 functional 16012 11296 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

DEBUG 2024-03-19 13:16:33,307 functional 16012 11296 
def xmap(task, it):
    return 1

DEBUG 2024-03-19 13:16:33,308 functional 16012 11296 
def backend_cleanup():
    return 1

DEBUG 2024-03-19 13:16:33,308 functional 16012 11296 
def chain(*args, **kwargs):
    return 1

DEBUG 2024-03-19 13:16:33,308 functional 16012 11296 
def xstarmap(task, it):
    return 1

DEBUG 2024-03-19 13:16:33,309 functional 16012 11296 
def accumulate(self, *args, **kwargs):
    return 1

DEBUG 2024-03-19 13:16:45,618 GetText 16012 11296 Failed to find locale Russian_Ukraine
DEBUG 2024-03-19 13:16:45,619 GetText 16012 11296 Attempting to load en_US as fallback
DEBUG 2024-03-19 13:16:45,619 GetText 16012 11296 c:\Users\Sergey Trosenko\DyplomaProductAggregator\.venv\Lib\site-packages\cron_descriptor\locale\en_US.mo Loaded
DEBUG 2024-03-19 13:16:45,620 GetText 16012 11296 Failed to find locale Russian_Ukraine
DEBUG 2024-03-19 13:16:45,620 GetText 16012 11296 Attempting to load en_US as fallback
DEBUG 2024-03-19 13:16:45,620 GetText 16012 11296 c:\Users\Sergey Trosenko\DyplomaProductAggregator\.venv\Lib\site-packages\cron_descriptor\locale\en_US.mo Loaded
DEBUG 2024-03-19 13:16:58,417 functional 22256 21140 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

DEBUG 2024-03-19 13:16:58,417 functional 22256 21140 
def xmap(task, it):
    return 1

DEBUG 2024-03-19 13:16:58,418 functional 22256 21140 
def backend_cleanup():
    return 1

DEBUG 2024-03-19 13:16:58,418 functional 22256 21140 
def chain(*args, **kwargs):
    return 1

DEBUG 2024-03-19 13:16:58,419 functional 22256 21140 
def xstarmap(task, it):
    return 1

DEBUG 2024-03-19 13:16:58,420 functional 22256 21140 
def accumulate(self, *args, **kwargs):
    return 1

DEBUG 2024-03-19 13:16:58,420 functional 22256 21140 
def get_silpo_products():
    return 1

DEBUG 2024-03-19 13:16:58,421 functional 22256 21140 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

DEBUG 2024-03-19 13:16:58,421 functional 22256 21140 
def chunks(task, it, n):
    return 1

DEBUG 2024-03-19 13:16:58,422 functional 22256 21140 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

DEBUG 2024-03-19 13:16:58,422 functional 22256 21140 
def get_rozetka_products():
    return 1

DEBUG 2024-03-19 13:18:16,611 functional 2776 9888 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

DEBUG 2024-03-19 13:18:16,612 functional 2776 9888 
def xmap(task, it):
    return 1

DEBUG 2024-03-19 13:18:16,612 functional 2776 9888 
def backend_cleanup():
    return 1

DEBUG 2024-03-19 13:18:16,613 functional 2776 9888 
def chain(*args, **kwargs):
    return 1

DEBUG 2024-03-19 13:18:16,613 functional 2776 9888 
def xstarmap(task, it):
    return 1

DEBUG 2024-03-19 13:18:16,615 functional 2776 9888 
def accumulate(self, *args, **kwargs):
    return 1

DEBUG 2024-03-19 13:18:16,615 functional 2776 9888 
def get_silpo_products():
    return 1

DEBUG 2024-03-19 13:18:16,615 functional 2776 9888 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

DEBUG 2024-03-19 13:18:16,616 functional 2776 9888 
def chunks(task, it, n):
    return 1

DEBUG 2024-03-19 13:18:16,617 functional 2776 9888 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

DEBUG 2024-03-19 13:18:16,617 functional 2776 9888 
def get_rozetka_products():
    return 1

DEBUG 2024-03-19 13:24:43,564 functional 9108 2021566592960 
def get_silpo_products():
    return 1

DEBUG 2024-03-19 13:24:43,565 functional 9108 2021566592960 
def get_rozetka_products():
    return 1

DEBUG 2024-03-19 13:24:43,566 functional 9108 2021566592960 
def xmap(task, it):
    return 1

DEBUG 2024-03-19 13:24:43,566 functional 9108 2021566592960 
def backend_cleanup():
    return 1

DEBUG 2024-03-19 13:24:43,567 functional 9108 2021566592960 
def chain(*args, **kwargs):
    return 1

DEBUG 2024-03-19 13:24:43,567 functional 9108 2021566592960 
def xstarmap(task, it):
    return 1

DEBUG 2024-03-19 13:24:43,568 functional 9108 2021566592960 
def get_rozetka_products():
    return 1

DEBUG 2024-03-19 13:24:43,568 functional 9108 2021566592960 
def accumulate(self, *args, **kwargs):
    return 1

DEBUG 2024-03-19 13:24:43,569 functional 9108 2021566592960 
def get_silpo_products():
    return 1

DEBUG 2024-03-19 13:24:43,569 functional 9108 2021566592960 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

DEBUG 2024-03-19 13:24:43,570 functional 9108 2021566592960 
def chunks(task, it, n):
    return 1

DEBUG 2024-03-19 13:24:43,571 functional 9108 2021566592960 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

DEBUG 2024-03-19 13:24:43,571 functional 9108 2021566592960 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

DEBUG 2024-03-19 13:26:16,110 GetText 16012 23804 Failed to find locale Russian_Ukraine
DEBUG 2024-03-19 13:26:16,110 GetText 16012 23804 Attempting to load en_US as fallback
DEBUG 2024-03-19 13:26:16,111 GetText 16012 23804 c:\Users\Sergey Trosenko\DyplomaProductAggregator\.venv\Lib\site-packages\cron_descriptor\locale\en_US.mo Loaded
DEBUG 2024-03-19 13:26:16,111 GetText 16012 23804 Failed to find locale Russian_Ukraine
DEBUG 2024-03-19 13:26:16,112 GetText 16012 23804 Attempting to load en_US as fallback
DEBUG 2024-03-19 13:26:16,112 GetText 16012 23804 c:\Users\Sergey Trosenko\DyplomaProductAggregator\.venv\Lib\site-packages\cron_descriptor\locale\en_US.mo Loaded
DEBUG 2024-03-19 13:26:19,597 GetText 16012 23804 Failed to find locale Russian_Ukraine
DEBUG 2024-03-19 13:26:19,597 GetText 16012 23804 Attempting to load en_US as fallback
DEBUG 2024-03-19 13:26:19,598 GetText 16012 23804 c:\Users\Sergey Trosenko\DyplomaProductAggregator\.venv\Lib\site-packages\cron_descriptor\locale\en_US.mo Loaded
DEBUG 2024-03-19 13:26:19,599 GetText 16012 23804 Failed to find locale Russian_Ukraine
DEBUG 2024-03-19 13:26:19,599 GetText 16012 23804 Attempting to load en_US as fallback
DEBUG 2024-03-19 13:26:19,600 GetText 16012 23804 c:\Users\Sergey Trosenko\DyplomaProductAggregator\.venv\Lib\site-packages\cron_descriptor\locale\en_US.mo Loaded
DEBUG 2024-03-19 13:26:21,692 GetText 16012 23804 Failed to find locale Russian_Ukraine
DEBUG 2024-03-19 13:26:21,692 GetText 16012 23804 Attempting to load en_US as fallback
DEBUG 2024-03-19 13:26:21,693 GetText 16012 23804 c:\Users\Sergey Trosenko\DyplomaProductAggregator\.venv\Lib\site-packages\cron_descriptor\locale\en_US.mo Loaded
DEBUG 2024-03-19 13:26:21,693 GetText 16012 23804 Failed to find locale Russian_Ukraine
DEBUG 2024-03-19 13:26:21,693 GetText 16012 23804 Attempting to load en_US as fallback
DEBUG 2024-03-19 13:26:21,694 GetText 16012 23804 c:\Users\Sergey Trosenko\DyplomaProductAggregator\.venv\Lib\site-packages\cron_descriptor\locale\en_US.mo Loaded
DEBUG 2024-03-19 13:26:36,959 GetText 16012 23804 Failed to find locale Russian_Ukraine
DEBUG 2024-03-19 13:26:36,959 GetText 16012 23804 Attempting to load en_US as fallback
DEBUG 2024-03-19 13:26:36,960 GetText 16012 23804 c:\Users\Sergey Trosenko\DyplomaProductAggregator\.venv\Lib\site-packages\cron_descriptor\locale\en_US.mo Loaded
DEBUG 2024-03-19 13:26:36,960 GetText 16012 23804 Failed to find locale Russian_Ukraine
DEBUG 2024-03-19 13:26:36,960 GetText 16012 23804 Attempting to load en_US as fallback
DEBUG 2024-03-19 13:26:36,961 GetText 16012 23804 c:\Users\Sergey Trosenko\DyplomaProductAggregator\.venv\Lib\site-packages\cron_descriptor\locale\en_US.mo Loaded
DEBUG 2024-03-19 13:26:41,845 GetText 16012 23804 Failed to find locale Russian_Ukraine
DEBUG 2024-03-19 13:26:41,846 GetText 16012 23804 Attempting to load en_US as fallback
DEBUG 2024-03-19 13:26:41,846 GetText 16012 23804 c:\Users\Sergey Trosenko\DyplomaProductAggregator\.venv\Lib\site-packages\cron_descriptor\locale\en_US.mo Loaded
DEBUG 2024-03-19 13:26:41,847 GetText 16012 23804 Failed to find locale Russian_Ukraine
DEBUG 2024-03-19 13:26:41,847 GetText 16012 23804 Attempting to load en_US as fallback
DEBUG 2024-03-19 13:26:41,847 GetText 16012 23804 c:\Users\Sergey Trosenko\DyplomaProductAggregator\.venv\Lib\site-packages\cron_descriptor\locale\en_US.mo Loaded
DEBUG 2024-03-19 13:26:52,732 GetText 16012 23804 Failed to find locale Russian_Ukraine
DEBUG 2024-03-19 13:26:52,733 GetText 16012 23804 Attempting to load en_US as fallback
DEBUG 2024-03-19 13:26:52,733 GetText 16012 23804 c:\Users\Sergey Trosenko\DyplomaProductAggregator\.venv\Lib\site-packages\cron_descriptor\locale\en_US.mo Loaded
DEBUG 2024-03-19 13:26:52,734 GetText 16012 23804 Failed to find locale Russian_Ukraine
DEBUG 2024-03-19 13:26:52,734 GetText 16012 23804 Attempting to load en_US as fallback
DEBUG 2024-03-19 13:26:52,735 GetText 16012 23804 c:\Users\Sergey Trosenko\DyplomaProductAggregator\.venv\Lib\site-packages\cron_descriptor\locale\en_US.mo Loaded
DEBUG 2024-03-19 13:28:02,120 functional 19792 1577264065088 
def get_silpo_products():
    return 1

DEBUG 2024-03-19 13:28:02,121 functional 19792 1577264065088 
def get_rozetka_products():
    return 1

DEBUG 2024-03-19 13:28:02,122 functional 19792 1577264065088 
def xmap(task, it):
    return 1

DEBUG 2024-03-19 13:28:02,122 functional 19792 1577264065088 
def backend_cleanup():
    return 1

DEBUG 2024-03-19 13:28:02,123 functional 19792 1577264065088 
def chain(*args, **kwargs):
    return 1

DEBUG 2024-03-19 13:28:02,123 functional 19792 1577264065088 
def xstarmap(task, it):
    return 1

DEBUG 2024-03-19 13:28:02,124 functional 19792 1577264065088 
def accumulate(self, *args, **kwargs):
    return 1

DEBUG 2024-03-19 13:28:02,125 functional 19792 1577264065088 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

DEBUG 2024-03-19 13:28:02,125 functional 19792 1577264065088 
def chunks(task, it, n):
    return 1

DEBUG 2024-03-19 13:28:02,126 functional 19792 1577264065088 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

DEBUG 2024-03-19 13:28:02,126 functional 19792 1577264065088 
def get_rozetka_products():
    return 1

DEBUG 2024-03-19 13:28:02,127 functional 19792 1577264065088 
def get_silpo_products():
    return 1

DEBUG 2024-03-19 13:28:02,127 functional 19792 1577264065088 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

DEBUG 2024-03-19 13:31:22,001 functional 6964 2157551005888 
def get_silpo_products():
    return 1

DEBUG 2024-03-19 13:31:22,002 functional 6964 2157551005888 
def get_rozetka_products():
    return 1

DEBUG 2024-03-19 13:31:22,002 functional 6964 2157551005888 
def xmap(task, it):
    return 1

DEBUG 2024-03-19 13:31:22,003 functional 6964 2157551005888 
def get_rozetka_products():
    return 1

DEBUG 2024-03-19 13:31:22,003 functional 6964 2157551005888 
def backend_cleanup():
    return 1

DEBUG 2024-03-19 13:31:22,004 functional 6964 2157551005888 
def get_silpo_products():
    return 1

DEBUG 2024-03-19 13:31:22,004 functional 6964 2157551005888 
def chain(*args, **kwargs):
    return 1

DEBUG 2024-03-19 13:31:22,005 functional 6964 2157551005888 
def xstarmap(task, it):
    return 1

DEBUG 2024-03-19 13:31:22,005 functional 6964 2157551005888 
def accumulate(self, *args, **kwargs):
    return 1

DEBUG 2024-03-19 13:31:22,006 functional 6964 2157551005888 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

DEBUG 2024-03-19 13:31:22,006 functional 6964 2157551005888 
def chunks(task, it, n):
    return 1

DEBUG 2024-03-19 13:31:22,007 functional 6964 2157551005888 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

DEBUG 2024-03-19 13:31:22,008 functional 6964 2157551005888 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

DEBUG 2024-03-19 13:31:40,766 GetText 16012 23804 Failed to find locale Russian_Ukraine
DEBUG 2024-03-19 13:31:40,766 GetText 16012 23804 Attempting to load en_US as fallback
DEBUG 2024-03-19 13:31:40,767 GetText 16012 23804 c:\Users\Sergey Trosenko\DyplomaProductAggregator\.venv\Lib\site-packages\cron_descriptor\locale\en_US.mo Loaded
DEBUG 2024-03-19 13:31:40,767 GetText 16012 23804 Failed to find locale Russian_Ukraine
DEBUG 2024-03-19 13:31:40,767 GetText 16012 23804 Attempting to load en_US as fallback
DEBUG 2024-03-19 13:31:40,768 GetText 16012 23804 c:\Users\Sergey Trosenko\DyplomaProductAggregator\.venv\Lib\site-packages\cron_descriptor\locale\en_US.mo Loaded
DEBUG 2024-03-19 13:31:48,508 GetText 16012 23804 Failed to find locale Russian_Ukraine
DEBUG 2024-03-19 13:31:48,508 GetText 16012 23804 Attempting to load en_US as fallback
DEBUG 2024-03-19 13:31:48,509 GetText 16012 23804 c:\Users\Sergey Trosenko\DyplomaProductAggregator\.venv\Lib\site-packages\cron_descriptor\locale\en_US.mo Loaded
DEBUG 2024-03-19 13:31:48,509 GetText 16012 23804 Failed to find locale Russian_Ukraine
DEBUG 2024-03-19 13:31:48,509 GetText 16012 23804 Attempting to load en_US as fallback
DEBUG 2024-03-19 13:31:48,510 GetText 16012 23804 c:\Users\Sergey Trosenko\DyplomaProductAggregator\.venv\Lib\site-packages\cron_descriptor\locale\en_US.mo Loaded
DEBUG 2024-03-19 13:31:54,250 GetText 16012 23804 Failed to find locale Russian_Ukraine
DEBUG 2024-03-19 13:31:54,250 GetText 16012 23804 Attempting to load en_US as fallback
DEBUG 2024-03-19 13:31:54,250 GetText 16012 23804 c:\Users\Sergey Trosenko\DyplomaProductAggregator\.venv\Lib\site-packages\cron_descriptor\locale\en_US.mo Loaded
DEBUG 2024-03-19 13:31:54,251 GetText 16012 23804 Failed to find locale Russian_Ukraine
DEBUG 2024-03-19 13:31:54,251 GetText 16012 23804 Attempting to load en_US as fallback
DEBUG 2024-03-19 13:31:54,252 GetText 16012 23804 c:\Users\Sergey Trosenko\DyplomaProductAggregator\.venv\Lib\site-packages\cron_descriptor\locale\en_US.mo Loaded
DEBUG 2024-03-19 13:31:58,933 GetText 16012 23804 Failed to find locale Russian_Ukraine
DEBUG 2024-03-19 13:31:58,934 GetText 16012 23804 Attempting to load en_US as fallback
DEBUG 2024-03-19 13:31:58,934 GetText 16012 23804 c:\Users\Sergey Trosenko\DyplomaProductAggregator\.venv\Lib\site-packages\cron_descriptor\locale\en_US.mo Loaded
DEBUG 2024-03-19 13:31:58,935 GetText 16012 23804 Failed to find locale Russian_Ukraine
DEBUG 2024-03-19 13:31:58,935 GetText 16012 23804 Attempting to load en_US as fallback
DEBUG 2024-03-19 13:31:58,936 GetText 16012 23804 c:\Users\Sergey Trosenko\DyplomaProductAggregator\.venv\Lib\site-packages\cron_descriptor\locale\en_US.mo Loaded
DEBUG 2024-03-19 13:32:03,716 GetText 16012 23804 Failed to find locale Russian_Ukraine
DEBUG 2024-03-19 13:32:03,716 GetText 16012 23804 Attempting to load en_US as fallback
DEBUG 2024-03-19 13:32:03,717 GetText 16012 23804 c:\Users\Sergey Trosenko\DyplomaProductAggregator\.venv\Lib\site-packages\cron_descriptor\locale\en_US.mo Loaded
DEBUG 2024-03-19 13:32:03,718 GetText 16012 23804 Failed to find locale Russian_Ukraine
DEBUG 2024-03-19 13:32:03,718 GetText 16012 23804 Attempting to load en_US as fallback
DEBUG 2024-03-19 13:32:03,719 GetText 16012 23804 c:\Users\Sergey Trosenko\DyplomaProductAggregator\.venv\Lib\site-packages\cron_descriptor\locale\en_US.mo Loaded
DEBUG 2024-03-19 13:35:02,415 GetText 16012 23804 Failed to find locale Russian_Ukraine
DEBUG 2024-03-19 13:35:02,415 GetText 16012 23804 Attempting to load en_US as fallback
DEBUG 2024-03-19 13:35:02,416 GetText 16012 23804 c:\Users\Sergey Trosenko\DyplomaProductAggregator\.venv\Lib\site-packages\cron_descriptor\locale\en_US.mo Loaded
DEBUG 2024-03-19 13:35:02,416 GetText 16012 23804 Failed to find locale Russian_Ukraine
DEBUG 2024-03-19 13:35:02,416 GetText 16012 23804 Attempting to load en_US as fallback
DEBUG 2024-03-19 13:35:02,417 GetText 16012 23804 c:\Users\Sergey Trosenko\DyplomaProductAggregator\.venv\Lib\site-packages\cron_descriptor\locale\en_US.mo Loaded
DEBUG 2024-03-19 13:35:05,869 GetText 16012 23804 Failed to find locale Russian_Ukraine
DEBUG 2024-03-19 13:35:05,869 GetText 16012 23804 Attempting to load en_US as fallback
DEBUG 2024-03-19 13:35:05,870 GetText 16012 23804 c:\Users\Sergey Trosenko\DyplomaProductAggregator\.venv\Lib\site-packages\cron_descriptor\locale\en_US.mo Loaded
DEBUG 2024-03-19 13:35:05,870 GetText 16012 23804 Failed to find locale Russian_Ukraine
DEBUG 2024-03-19 13:35:05,871 GetText 16012 23804 Attempting to load en_US as fallback
DEBUG 2024-03-19 13:35:05,871 GetText 16012 23804 c:\Users\Sergey Trosenko\DyplomaProductAggregator\.venv\Lib\site-packages\cron_descriptor\locale\en_US.mo Loaded
INFO 2024-03-19 22:12:39,408 autoreload 22300 17504 Watching for file changes with StatReloader
DEBUG 2024-03-19 22:13:54,536 functional 8804 5812 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

DEBUG 2024-03-19 22:13:54,537 functional 8804 5812 
def xmap(task, it):
    return 1

DEBUG 2024-03-19 22:13:54,538 functional 8804 5812 
def backend_cleanup():
    return 1

DEBUG 2024-03-19 22:13:54,538 functional 8804 5812 
def get_silpo_products():
    return 1

DEBUG 2024-03-19 22:13:54,539 functional 8804 5812 
def chain(*args, **kwargs):
    return 1

DEBUG 2024-03-19 22:13:54,539 functional 8804 5812 
def xstarmap(task, it):
    return 1

DEBUG 2024-03-19 22:13:54,540 functional 8804 5812 
def accumulate(self, *args, **kwargs):
    return 1

DEBUG 2024-03-19 22:13:54,541 functional 8804 5812 
def get_rozetka_products():
    return 1

DEBUG 2024-03-19 22:13:54,541 functional 8804 5812 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

DEBUG 2024-03-19 22:13:54,542 functional 8804 5812 
def chunks(task, it, n):
    return 1

DEBUG 2024-03-19 22:13:54,543 functional 8804 5812 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

DEBUG 2024-03-19 22:14:25,518 functional 6644 1714144229312 
def get_silpo_products():
    return 1

DEBUG 2024-03-19 22:14:25,519 functional 6644 1714144229312 
def get_rozetka_products():
    return 1

DEBUG 2024-03-19 22:14:25,519 functional 6644 1714144229312 
def xmap(task, it):
    return 1

DEBUG 2024-03-19 22:14:25,520 functional 6644 1714144229312 
def backend_cleanup():
    return 1

DEBUG 2024-03-19 22:14:25,520 functional 6644 1714144229312 
def chain(*args, **kwargs):
    return 1

DEBUG 2024-03-19 22:14:25,521 functional 6644 1714144229312 
def xstarmap(task, it):
    return 1

DEBUG 2024-03-19 22:14:25,522 functional 6644 1714144229312 
def accumulate(self, *args, **kwargs):
    return 1

DEBUG 2024-03-19 22:14:25,522 functional 6644 1714144229312 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

DEBUG 2024-03-19 22:14:25,523 functional 6644 1714144229312 
def chunks(task, it, n):
    return 1

DEBUG 2024-03-19 22:14:25,523 functional 6644 1714144229312 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

DEBUG 2024-03-19 22:14:25,524 functional 6644 1714144229312 
def get_rozetka_products():
    return 1

DEBUG 2024-03-19 22:14:25,524 functional 6644 1714144229312 
def get_silpo_products():
    return 1

DEBUG 2024-03-19 22:14:25,525 functional 6644 1714144229312 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

INFO 2024-03-21 22:18:46,280 autoreload 22472 21272 Watching for file changes with StatReloader
INFO 2024-03-21 22:29:19,335 autoreload 22472 21272 C:\Users\Sergey Trosenko\DyplomaProductAggregator\backend\backend\settings.py changed, reloading.
INFO 2024-03-21 22:29:21,339 autoreload 23128 25236 Watching for file changes with StatReloader
INFO 2024-03-21 22:29:30,377 autoreload 23128 25236 C:\Users\Sergey Trosenko\DyplomaProductAggregator\backend\backend\settings.py changed, reloading.
INFO 2024-03-21 22:29:32,276 autoreload 21828 20756 Watching for file changes with StatReloader
INFO 2024-03-21 22:38:43,852 autoreload 11960 17272 Watching for file changes with StatReloader
INFO 2024-03-21 22:43:13,374 autoreload 3240 5848 Watching for file changes with StatReloader
INFO 2024-03-24 14:20:47,479 autoreload 19208 11544 Watching for file changes with StatReloader
INFO 2024-03-24 17:55:23,799 autoreload 19208 11544 C:\Users\Sergey Trosenko\DyplomaProductAggregator\backend\backend\urls.py changed, reloading.
INFO 2024-03-24 17:55:26,455 autoreload 4904 13296 Watching for file changes with StatReloader
INFO 2024-03-24 18:00:21,732 autoreload 4904 13296 C:\Users\Sergey Trosenko\DyplomaProductAggregator\backend\users\urls.py changed, reloading.
INFO 2024-03-24 18:00:23,650 autoreload 21896 21516 Watching for file changes with StatReloader
INFO 2024-03-24 18:02:52,348 autoreload 21896 21516 C:\Users\Sergey Trosenko\DyplomaProductAggregator\backend\users\urls.py changed, reloading.
INFO 2024-03-24 18:02:54,208 autoreload 21692 19880 Watching for file changes with StatReloader
INFO 2024-03-25 18:19:16,211 autoreload 14048 1816 Watching for file changes with StatReloader
WARNING 2024-03-25 18:20:43,236 log 14048 19820 Forbidden (CSRF cookie not set.): /admin/login/
INFO 2024-03-25 18:25:01,362 autoreload 6912 10944 Watching for file changes with StatReloader
INFO 2024-03-25 20:07:54,796 autoreload 6912 10944 C:\Users\Sergey Trosenko\DyplomaProductAggregator\backend\backend\settings.py changed, reloading.
INFO 2024-03-25 20:07:57,117 autoreload 5436 2620 Watching for file changes with StatReloader
DEBUG 2024-03-25 20:11:32,644 functional 11620 16024 
def chunks(task, it, n):
    return 1

DEBUG 2024-03-25 20:11:32,644 functional 11620 16024 
def get_silpo_products():
    return 1

DEBUG 2024-03-25 20:11:32,645 functional 11620 16024 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

DEBUG 2024-03-25 20:11:32,646 functional 11620 16024 
def get_rozetka_products():
    return 1

DEBUG 2024-03-25 20:11:32,646 functional 11620 16024 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

DEBUG 2024-03-25 20:11:32,647 functional 11620 16024 
def xmap(task, it):
    return 1

DEBUG 2024-03-25 20:11:32,647 functional 11620 16024 
def backend_cleanup():
    return 1

DEBUG 2024-03-25 20:11:32,648 functional 11620 16024 
def get_tavria_products():
    return 1

DEBUG 2024-03-25 20:11:32,648 functional 11620 16024 
def chain(*args, **kwargs):
    return 1

DEBUG 2024-03-25 20:11:32,649 functional 11620 16024 
def xstarmap(task, it):
    return 1

DEBUG 2024-03-25 20:11:32,649 functional 11620 16024 
def accumulate(self, *args, **kwargs):
    return 1

DEBUG 2024-03-25 20:11:32,650 functional 11620 16024 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

DEBUG 2024-03-25 20:11:42,918 functional 5572 1705759632768 
def get_silpo_products():
    return 1

DEBUG 2024-03-25 20:11:42,918 functional 5572 1705759632768 
def get_rozetka_products():
    return 1

DEBUG 2024-03-25 20:11:42,919 functional 5572 1705759632768 
def get_tavria_products():
    return 1

DEBUG 2024-03-25 20:11:42,920 functional 5572 1705759632768 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

DEBUG 2024-03-25 20:11:42,920 functional 5572 1705759632768 
def get_tavria_products():
    return 1

DEBUG 2024-03-25 20:11:42,920 functional 5572 1705759632768 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

DEBUG 2024-03-25 20:11:42,921 functional 5572 1705759632768 
def xmap(task, it):
    return 1

DEBUG 2024-03-25 20:11:42,921 functional 5572 1705759632768 
def backend_cleanup():
    return 1

DEBUG 2024-03-25 20:11:42,922 functional 5572 1705759632768 
def chain(*args, **kwargs):
    return 1

DEBUG 2024-03-25 20:11:42,922 functional 5572 1705759632768 
def get_rozetka_products():
    return 1

DEBUG 2024-03-25 20:11:42,922 functional 5572 1705759632768 
def xstarmap(task, it):
    return 1

DEBUG 2024-03-25 20:11:42,923 functional 5572 1705759632768 
def accumulate(self, *args, **kwargs):
    return 1

DEBUG 2024-03-25 20:11:42,923 functional 5572 1705759632768 
def get_silpo_products():
    return 1

DEBUG 2024-03-25 20:11:42,924 functional 5572 1705759632768 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

DEBUG 2024-03-25 20:11:42,924 functional 5572 1705759632768 
def chunks(task, it, n):
    return 1

INFO 2024-03-25 20:33:55,216 autoreload 5436 2620 C:\Users\Sergey Trosenko\DyplomaProductAggregator\backend\users\schema.py changed, reloading.
INFO 2024-03-25 20:33:56,981 autoreload 3872 6532 Watching for file changes with StatReloader
INFO 2024-03-25 20:36:30,111 autoreload 3872 6532 C:\Users\Sergey Trosenko\DyplomaProductAggregator\backend\users\schema.py changed, reloading.
INFO 2024-03-25 20:36:31,684 autoreload 7500 9352 Watching for file changes with StatReloader
INFO 2024-03-25 20:49:30,916 autoreload 7500 9352 C:\Users\Sergey Trosenko\DyplomaProductAggregator\backend\users\schema.py changed, reloading.
INFO 2024-03-25 20:49:32,490 autoreload 2180 13880 Watching for file changes with StatReloader
INFO 2024-03-25 20:51:20,174 autoreload 2180 13880 C:\Users\Sergey Trosenko\DyplomaProductAggregator\backend\users\schema.py changed, reloading.
INFO 2024-03-25 20:51:21,765 autoreload 20872 11248 Watching for file changes with StatReloader
INFO 2024-03-25 21:28:43,760 autoreload 6544 10796 Watching for file changes with StatReloader
INFO 2024-03-25 21:32:45,690 autoreload 6544 10796 C:\Users\Sergey Trosenko\DyplomaProductAggregator\backend\users\schema.py changed, reloading.
INFO 2024-03-25 21:32:47,343 autoreload 17748 11252 Watching for file changes with StatReloader
INFO 2024-03-25 21:33:16,604 autoreload 17748 11252 C:\Users\Sergey Trosenko\DyplomaProductAggregator\backend\users\schema.py changed, reloading.
INFO 2024-03-25 21:33:18,193 autoreload 17628 9128 Watching for file changes with StatReloader
INFO 2024-03-25 21:37:48,212 autoreload 17628 9128 C:\Users\Sergey Trosenko\DyplomaProductAggregator\backend\users\schema.py changed, reloading.
INFO 2024-03-25 21:37:49,834 autoreload 8328 13076 Watching for file changes with StatReloader
INFO 2024-03-25 21:38:47,077 autoreload 8328 13076 C:\Users\Sergey Trosenko\DyplomaProductAggregator\backend\users\schema.py changed, reloading.
INFO 2024-03-25 21:38:48,643 autoreload 19968 13352 Watching for file changes with StatReloader
INFO 2024-03-25 21:42:25,509 autoreload 19968 13352 C:\Users\Sergey Trosenko\DyplomaProductAggregator\backend\users\schema.py changed, reloading.
INFO 2024-03-25 21:42:27,166 autoreload 2924 11428 Watching for file changes with StatReloader
INFO 2024-03-25 21:42:56,143 autoreload 2924 11428 C:\Users\Sergey Trosenko\DyplomaProductAggregator\backend\users\schema.py changed, reloading.
INFO 2024-03-25 21:42:57,765 autoreload 16432 21236 Watching for file changes with StatReloader
INFO 2024-03-25 22:29:39,393 autoreload 16432 21236 C:\Users\Sergey Trosenko\DyplomaProductAggregator\backend\users\schema.py changed, reloading.
INFO 2024-03-25 22:29:41,260 autoreload 10884 20412 Watching for file changes with StatReloader
INFO 2024-03-25 22:30:15,426 autoreload 10884 20412 C:\Users\Sergey Trosenko\DyplomaProductAggregator\backend\users\schema.py changed, reloading.
INFO 2024-03-25 22:30:16,989 autoreload 12592 22572 Watching for file changes with StatReloader
INFO 2024-03-25 22:30:43,714 autoreload 12592 22572 C:\Users\Sergey Trosenko\DyplomaProductAggregator\backend\users\schema.py changed, reloading.
INFO 2024-03-25 22:30:45,307 autoreload 23572 18280 Watching for file changes with StatReloader
INFO 2024-03-25 22:31:37,519 autoreload 23572 18280 C:\Users\Sergey Trosenko\DyplomaProductAggregator\backend\users\schema.py changed, reloading.
INFO 2024-03-25 22:31:39,054 autoreload 23756 24396 Watching for file changes with StatReloader
INFO 2024-03-25 22:45:37,104 autoreload 23756 24396 C:\Users\Sergey Trosenko\DyplomaProductAggregator\backend\users\schema.py changed, reloading.
INFO 2024-03-25 22:45:38,739 autoreload 14284 21240 Watching for file changes with StatReloader
INFO 2024-03-25 22:47:28,983 autoreload 14284 21240 C:\Users\Sergey Trosenko\DyplomaProductAggregator\backend\users\schema.py changed, reloading.
INFO 2024-03-25 22:47:30,597 autoreload 22952 24036 Watching for file changes with StatReloader
INFO 2024-03-25 22:48:58,114 autoreload 22952 24036 C:\Users\Sergey Trosenko\DyplomaProductAggregator\backend\users\schema.py changed, reloading.
INFO 2024-03-25 22:48:59,740 autoreload 20776 11768 Watching for file changes with StatReloader
INFO 2024-03-25 22:49:26,957 autoreload 20776 11768 C:\Users\Sergey Trosenko\DyplomaProductAggregator\backend\users\schema.py changed, reloading.
INFO 2024-03-25 22:49:28,673 autoreload 16816 17528 Watching for file changes with StatReloader
INFO 2024-03-25 22:51:28,804 autoreload 16816 17528 C:\Users\Sergey Trosenko\DyplomaProductAggregator\backend\users\schema.py changed, reloading.
INFO 2024-03-25 22:51:30,500 autoreload 11624 21368 Watching for file changes with StatReloader
INFO 2024-03-25 22:54:30,982 autoreload 11624 21368 C:\Users\Sergey Trosenko\DyplomaProductAggregator\backend\users\schema.py changed, reloading.
INFO 2024-03-25 22:54:32,548 autoreload 22868 14572 Watching for file changes with StatReloader
INFO 2024-03-25 22:55:03,774 autoreload 22868 14572 C:\Users\Sergey Trosenko\DyplomaProductAggregator\backend\users\schema.py changed, reloading.
INFO 2024-03-25 22:55:05,421 autoreload 16244 17052 Watching for file changes with StatReloader
INFO 2024-03-25 22:56:18,325 autoreload 16244 17052 C:\Users\Sergey Trosenko\DyplomaProductAggregator\backend\users\schema.py changed, reloading.
INFO 2024-03-25 22:56:19,978 autoreload 22084 24140 Watching for file changes with StatReloader
INFO 2024-03-25 22:56:31,752 autoreload 22084 24140 C:\Users\Sergey Trosenko\DyplomaProductAggregator\backend\users\schema.py changed, reloading.
INFO 2024-03-25 22:56:33,515 autoreload 21984 19536 Watching for file changes with StatReloader
INFO 2024-03-26 12:07:17,217 autoreload 21984 19536 C:\Users\Sergey Trosenko\DyplomaProductAggregator\backend\users\schema.py changed, reloading.
INFO 2024-03-26 12:07:19,073 autoreload 23768 1212 Watching for file changes with StatReloader
INFO 2024-03-26 12:22:10,350 autoreload 23768 1212 C:\Users\Sergey Trosenko\DyplomaProductAggregator\backend\users\urls.py changed, reloading.
INFO 2024-03-26 12:22:11,989 autoreload 22356 22748 Watching for file changes with StatReloader
INFO 2024-03-26 12:27:51,485 autoreload 22356 22748 C:\Users\Sergey Trosenko\DyplomaProductAggregator\backend\users\schema.py changed, reloading.
INFO 2024-03-26 12:27:53,426 autoreload 5444 8516 Watching for file changes with StatReloader
INFO 2024-03-26 12:28:15,084 autoreload 5444 8516 C:\Users\Sergey Trosenko\DyplomaProductAggregator\backend\users\schema.py changed, reloading.
INFO 2024-03-26 12:28:16,673 autoreload 23040 13252 Watching for file changes with StatReloader
DEBUG 2024-03-27 13:32:25,027 functional 10 140519039788864 
def chunks(task, it, n):
    return 1

DEBUG 2024-03-27 13:32:25,029 functional 10 140519039788864 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

DEBUG 2024-03-27 13:32:25,031 functional 10 140519039788864 
def backend_cleanup():
    return 1

DEBUG 2024-03-27 13:32:25,033 functional 10 140519039788864 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

DEBUG 2024-03-27 13:32:25,035 functional 10 140519039788864 
def xmap(task, it):
    return 1

DEBUG 2024-03-27 13:32:25,037 functional 10 140519039788864 
def get_tavria_products():
    return 1

DEBUG 2024-03-27 13:32:25,039 functional 11 139960323225408 
def chunks(task, it, n):
    return 1

DEBUG 2024-03-27 13:32:25,039 functional 10 140519039788864 
def chain(*args, **kwargs):
    return 1

DEBUG 2024-03-27 13:32:25,041 functional 10 140519039788864 
def get_rozetka_products():
    return 1

DEBUG 2024-03-27 13:32:25,042 functional 11 139960323225408 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

DEBUG 2024-03-27 13:32:25,043 functional 11 139960323225408 
def backend_cleanup():
    return 1

DEBUG 2024-03-27 13:32:25,043 functional 10 140519039788864 
def xstarmap(task, it):
    return 1

DEBUG 2024-03-27 13:32:25,045 functional 11 139960323225408 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

DEBUG 2024-03-27 13:32:25,045 functional 10 140519039788864 
def get_silpo_products():
    return 1

DEBUG 2024-03-27 13:32:25,047 functional 11 139960323225408 
def xmap(task, it):
    return 1

DEBUG 2024-03-27 13:32:25,047 functional 10 140519039788864 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

DEBUG 2024-03-27 13:32:25,049 functional 11 139960323225408 
def get_tavria_products():
    return 1

DEBUG 2024-03-27 13:32:25,050 functional 10 140519039788864 
def accumulate(self, *args, **kwargs):
    return 1

DEBUG 2024-03-27 13:32:25,052 functional 11 139960323225408 
def chain(*args, **kwargs):
    return 1

DEBUG 2024-03-27 13:32:25,057 functional 11 139960323225408 
def get_rozetka_products():
    return 1

DEBUG 2024-03-27 13:32:25,060 functional 11 139960323225408 
def xstarmap(task, it):
    return 1

DEBUG 2024-03-27 13:32:25,062 functional 11 139960323225408 
def get_silpo_products():
    return 1

DEBUG 2024-03-27 13:32:25,064 functional 11 139960323225408 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

DEBUG 2024-03-27 13:32:25,066 functional 11 139960323225408 
def accumulate(self, *args, **kwargs):
    return 1

INFO 2024-03-27 13:32:28,087 autoreload 12 140401443612480 Watching for file changes with StatReloader
INFO 2024-03-27 13:39:16,790 autoreload 12 140401443612480 /django_proj/backend/settings.py changed, reloading.
INFO 2024-03-27 13:39:21,445 autoreload 27 140366735124288 Watching for file changes with StatReloader
DEBUG 2024-03-27 13:40:42,394 functional 10 140028571289408 
def chunks(task, it, n):
    return 1

DEBUG 2024-03-27 13:40:42,396 functional 10 140028571289408 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

DEBUG 2024-03-27 13:40:42,397 functional 10 140028571289408 
def backend_cleanup():
    return 1

DEBUG 2024-03-27 13:40:42,399 functional 10 140028571289408 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

DEBUG 2024-03-27 13:40:42,400 functional 10 140028571289408 
def xmap(task, it):
    return 1

DEBUG 2024-03-27 13:40:42,402 functional 10 140028571289408 
def get_tavria_products():
    return 1

DEBUG 2024-03-27 13:40:42,403 functional 10 140028571289408 
def chain(*args, **kwargs):
    return 1

DEBUG 2024-03-27 13:40:42,404 functional 10 140028571289408 
def get_rozetka_products():
    return 1

DEBUG 2024-03-27 13:40:42,406 functional 10 140028571289408 
def xstarmap(task, it):
    return 1

DEBUG 2024-03-27 13:40:42,407 functional 10 140028571289408 
def get_silpo_products():
    return 1

DEBUG 2024-03-27 13:40:42,408 functional 10 140028571289408 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

DEBUG 2024-03-27 13:40:42,410 functional 10 140028571289408 
def accumulate(self, *args, **kwargs):
    return 1

DEBUG 2024-03-27 13:40:42,416 functional 11 140233133844288 
def chunks(task, it, n):
    return 1

DEBUG 2024-03-27 13:40:42,418 functional 11 140233133844288 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

DEBUG 2024-03-27 13:40:42,420 functional 11 140233133844288 
def backend_cleanup():
    return 1

DEBUG 2024-03-27 13:40:42,421 functional 11 140233133844288 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

DEBUG 2024-03-27 13:40:42,422 functional 11 140233133844288 
def get_tavria_products():
    return 1

DEBUG 2024-03-27 13:40:42,423 functional 11 140233133844288 
def xmap(task, it):
    return 1

DEBUG 2024-03-27 13:40:42,425 functional 11 140233133844288 
def get_rozetka_products():
    return 1

DEBUG 2024-03-27 13:40:42,426 functional 11 140233133844288 
def chain(*args, **kwargs):
    return 1

DEBUG 2024-03-27 13:40:42,428 functional 11 140233133844288 
def get_silpo_products():
    return 1

DEBUG 2024-03-27 13:40:42,429 functional 11 140233133844288 
def xstarmap(task, it):
    return 1

DEBUG 2024-03-27 13:40:42,430 functional 11 140233133844288 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

DEBUG 2024-03-27 13:40:42,432 functional 11 140233133844288 
def accumulate(self, *args, **kwargs):
    return 1

INFO 2024-03-27 13:40:45,545 autoreload 12 140558060734272 Watching for file changes with StatReloader
DEBUG 2024-03-28 11:18:46,791 functional 11 140320430901056 
def chunks(task, it, n):
    return 1

DEBUG 2024-03-28 11:18:46,793 functional 11 140320430901056 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

DEBUG 2024-03-28 11:18:46,795 functional 11 140320430901056 
def backend_cleanup():
    return 1

DEBUG 2024-03-28 11:18:46,796 functional 11 140320430901056 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

DEBUG 2024-03-28 11:18:46,798 functional 11 140320430901056 
def xmap(task, it):
    return 1

DEBUG 2024-03-28 11:18:46,799 functional 11 140320430901056 
def get_tavria_products():
    return 1

DEBUG 2024-03-28 11:18:46,801 functional 11 140320430901056 
def chain(*args, **kwargs):
    return 1

DEBUG 2024-03-28 11:18:46,802 functional 11 140320430901056 
def get_rozetka_products():
    return 1

DEBUG 2024-03-28 11:18:46,803 functional 11 140320430901056 
def xstarmap(task, it):
    return 1

DEBUG 2024-03-28 11:18:46,805 functional 11 140320430901056 
def get_silpo_products():
    return 1

DEBUG 2024-03-28 11:18:46,806 functional 11 140320430901056 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

DEBUG 2024-03-28 11:18:46,807 functional 11 140320430901056 
def accumulate(self, *args, **kwargs):
    return 1

DEBUG 2024-03-28 11:18:46,846 functional 10 140180046325568 
def chunks(task, it, n):
    return 1

DEBUG 2024-03-28 11:18:46,849 functional 10 140180046325568 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

DEBUG 2024-03-28 11:18:46,850 functional 10 140180046325568 
def backend_cleanup():
    return 1

DEBUG 2024-03-28 11:18:46,852 functional 10 140180046325568 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

DEBUG 2024-03-28 11:18:46,853 functional 10 140180046325568 
def xmap(task, it):
    return 1

DEBUG 2024-03-28 11:18:46,855 functional 10 140180046325568 
def get_tavria_products():
    return 1

DEBUG 2024-03-28 11:18:46,856 functional 10 140180046325568 
def chain(*args, **kwargs):
    return 1

DEBUG 2024-03-28 11:18:46,858 functional 10 140180046325568 
def get_rozetka_products():
    return 1

DEBUG 2024-03-28 11:18:46,859 functional 10 140180046325568 
def xstarmap(task, it):
    return 1

DEBUG 2024-03-28 11:18:46,860 functional 10 140180046325568 
def get_silpo_products():
    return 1

DEBUG 2024-03-28 11:18:46,862 functional 10 140180046325568 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

DEBUG 2024-03-28 11:18:46,864 functional 10 140180046325568 
def accumulate(self, *args, **kwargs):
    return 1

INFO 2024-03-28 11:18:49,981 autoreload 12 139791980779328 Watching for file changes with StatReloader
DEBUG 2024-03-28 11:38:00,326 functional 10 140263649392448 
def chunks(task, it, n):
    return 1

DEBUG 2024-03-28 11:38:00,327 functional 10 140263649392448 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

DEBUG 2024-03-28 11:38:00,329 functional 10 140263649392448 
def backend_cleanup():
    return 1

DEBUG 2024-03-28 11:38:00,329 functional 10 140263649392448 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

DEBUG 2024-03-28 11:38:00,330 functional 10 140263649392448 
def xmap(task, it):
    return 1

DEBUG 2024-03-28 11:38:00,331 functional 10 140263649392448 
def get_tavria_products():
    return 1

DEBUG 2024-03-28 11:38:00,332 functional 10 140263649392448 
def chain(*args, **kwargs):
    return 1

DEBUG 2024-03-28 11:38:00,332 functional 10 140263649392448 
def get_rozetka_products():
    return 1

DEBUG 2024-03-28 11:38:00,333 functional 10 140263649392448 
def xstarmap(task, it):
    return 1

DEBUG 2024-03-28 11:38:00,334 functional 10 140263649392448 
def get_silpo_products():
    return 1

DEBUG 2024-03-28 11:38:00,335 functional 10 140263649392448 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

DEBUG 2024-03-28 11:38:00,335 functional 10 140263649392448 
def accumulate(self, *args, **kwargs):
    return 1

DEBUG 2024-03-28 11:38:00,359 functional 11 140400351377216 
def chunks(task, it, n):
    return 1

DEBUG 2024-03-28 11:38:00,360 functional 11 140400351377216 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

DEBUG 2024-03-28 11:38:00,361 functional 11 140400351377216 
def backend_cleanup():
    return 1

DEBUG 2024-03-28 11:38:00,362 functional 11 140400351377216 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

DEBUG 2024-03-28 11:38:00,362 functional 11 140400351377216 
def get_tavria_products():
    return 1

DEBUG 2024-03-28 11:38:00,363 functional 11 140400351377216 
def xmap(task, it):
    return 1

DEBUG 2024-03-28 11:38:00,364 functional 11 140400351377216 
def get_rozetka_products():
    return 1

DEBUG 2024-03-28 11:38:00,364 functional 11 140400351377216 
def chain(*args, **kwargs):
    return 1

DEBUG 2024-03-28 11:38:00,365 functional 11 140400351377216 
def get_silpo_products():
    return 1

DEBUG 2024-03-28 11:38:00,366 functional 11 140400351377216 
def xstarmap(task, it):
    return 1

DEBUG 2024-03-28 11:38:00,366 functional 11 140400351377216 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

DEBUG 2024-03-28 11:38:00,367 functional 11 140400351377216 
def accumulate(self, *args, **kwargs):
    return 1

INFO 2024-03-28 11:38:02,116 autoreload 12 139784055220032 Watching for file changes with StatReloader
DEBUG 2024-03-28 11:51:06,586 functional 10 140137362536256 
def chunks(task, it, n):
    return 1

DEBUG 2024-03-28 11:51:06,587 functional 10 140137362536256 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

DEBUG 2024-03-28 11:51:06,588 functional 10 140137362536256 
def backend_cleanup():
    return 1

DEBUG 2024-03-28 11:51:06,588 functional 11 140524252489536 
def chunks(task, it, n):
    return 1

DEBUG 2024-03-28 11:51:06,588 functional 10 140137362536256 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

DEBUG 2024-03-28 11:51:06,589 functional 11 140524252489536 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

DEBUG 2024-03-28 11:51:06,589 functional 10 140137362536256 
def xmap(task, it):
    return 1

DEBUG 2024-03-28 11:51:06,589 functional 11 140524252489536 
def backend_cleanup():
    return 1

DEBUG 2024-03-28 11:51:06,589 functional 10 140137362536256 
def get_tavria_products():
    return 1

DEBUG 2024-03-28 11:51:06,590 functional 11 140524252489536 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

DEBUG 2024-03-28 11:51:06,590 functional 10 140137362536256 
def chain(*args, **kwargs):
    return 1

DEBUG 2024-03-28 11:51:06,590 functional 10 140137362536256 
def get_rozetka_products():
    return 1

DEBUG 2024-03-28 11:51:06,590 functional 11 140524252489536 
def xmap(task, it):
    return 1

DEBUG 2024-03-28 11:51:06,591 functional 10 140137362536256 
def xstarmap(task, it):
    return 1

DEBUG 2024-03-28 11:51:06,591 functional 11 140524252489536 
def get_tavria_products():
    return 1

DEBUG 2024-03-28 11:51:06,592 functional 10 140137362536256 
def get_silpo_products():
    return 1

DEBUG 2024-03-28 11:51:06,592 functional 11 140524252489536 
def chain(*args, **kwargs):
    return 1

DEBUG 2024-03-28 11:51:06,592 functional 11 140524252489536 
def get_rozetka_products():
    return 1

DEBUG 2024-03-28 11:51:06,592 functional 10 140137362536256 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

DEBUG 2024-03-28 11:51:06,593 functional 11 140524252489536 
def xstarmap(task, it):
    return 1

DEBUG 2024-03-28 11:51:06,593 functional 10 140137362536256 
def accumulate(self, *args, **kwargs):
    return 1

DEBUG 2024-03-28 11:51:06,594 functional 11 140524252489536 
def get_silpo_products():
    return 1

DEBUG 2024-03-28 11:51:06,594 functional 11 140524252489536 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

DEBUG 2024-03-28 11:51:06,595 functional 11 140524252489536 
def accumulate(self, *args, **kwargs):
    return 1

INFO 2024-03-28 11:51:08,548 autoreload 12 139634604033856 Watching for file changes with StatReloader
DEBUG 2024-03-28 12:31:56,263 functional 12 140108366415680 
def chunks(task, it, n):
    return 1

DEBUG 2024-03-28 12:31:56,264 functional 11 140637722675008 
def chunks(task, it, n):
    return 1

DEBUG 2024-03-28 12:31:56,266 functional 11 140637722675008 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

DEBUG 2024-03-28 12:31:56,266 functional 12 140108366415680 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

DEBUG 2024-03-28 12:31:56,266 functional 11 140637722675008 
def backend_cleanup():
    return 1

DEBUG 2024-03-28 12:31:56,267 functional 12 140108366415680 
def backend_cleanup():
    return 1

DEBUG 2024-03-28 12:31:56,267 functional 11 140637722675008 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

DEBUG 2024-03-28 12:31:56,268 functional 12 140108366415680 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

DEBUG 2024-03-28 12:31:56,268 functional 11 140637722675008 
def xmap(task, it):
    return 1

DEBUG 2024-03-28 12:31:56,269 functional 11 140637722675008 
def get_tavria_products():
    return 1

DEBUG 2024-03-28 12:31:56,269 functional 12 140108366415680 
def xmap(task, it):
    return 1

DEBUG 2024-03-28 12:31:56,270 functional 11 140637722675008 
def chain(*args, **kwargs):
    return 1

DEBUG 2024-03-28 12:31:56,271 functional 12 140108366415680 
def get_tavria_products():
    return 1

DEBUG 2024-03-28 12:31:56,271 functional 11 140637722675008 
def get_rozetka_products():
    return 1

DEBUG 2024-03-28 12:31:56,271 functional 12 140108366415680 
def chain(*args, **kwargs):
    return 1

DEBUG 2024-03-28 12:31:56,272 functional 11 140637722675008 
def xstarmap(task, it):
    return 1

DEBUG 2024-03-28 12:31:56,272 functional 12 140108366415680 
def get_rozetka_products():
    return 1

DEBUG 2024-03-28 12:31:56,273 functional 11 140637722675008 
def get_silpo_products():
    return 1

DEBUG 2024-03-28 12:31:56,273 functional 12 140108366415680 
def xstarmap(task, it):
    return 1

DEBUG 2024-03-28 12:31:56,273 functional 11 140637722675008 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

DEBUG 2024-03-28 12:31:56,274 functional 12 140108366415680 
def get_silpo_products():
    return 1

DEBUG 2024-03-28 12:31:56,275 functional 11 140637722675008 
def accumulate(self, *args, **kwargs):
    return 1

DEBUG 2024-03-28 12:31:56,275 functional 12 140108366415680 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

DEBUG 2024-03-28 12:31:56,276 functional 12 140108366415680 
def accumulate(self, *args, **kwargs):
    return 1

INFO 2024-03-28 12:31:59,120 autoreload 13 139742897358656 Watching for file changes with StatReloader
INFO 2024-03-28 12:39:32,478 autoreload 13 139742897358656 /django_proj/backend/settings.py changed, reloading.
INFO 2024-03-28 12:39:34,255 autoreload 31 140519828514624 Watching for file changes with StatReloader
INFO 2024-03-28 12:40:38,250 autoreload 31 140519828514624 /django_proj/backend/settings.py changed, reloading.
INFO 2024-03-28 12:40:39,848 autoreload 36 140586553435968 Watching for file changes with StatReloader
INFO 2024-03-28 13:33:39,594 autoreload 36 140586553435968 /django_proj/aggregator/schema.py changed, reloading.
INFO 2024-03-28 13:33:41,920 autoreload 44 140224378378048 Watching for file changes with StatReloader
INFO 2024-03-28 13:35:09,384 autoreload 44 140224378378048 /django_proj/aggregator/schema.py changed, reloading.
INFO 2024-03-28 13:35:11,097 autoreload 48 140029266409280 Watching for file changes with StatReloader
DEBUG 2024-03-28 13:37:46,419 functional 11 139782622603072 
def chunks(task, it, n):
    return 1

DEBUG 2024-03-28 13:37:46,420 functional 11 139782622603072 
def get_rozetka_products():
    return 1

DEBUG 2024-03-28 13:37:46,421 functional 11 139782622603072 
def get_tavria_products():
    return 1

DEBUG 2024-03-28 13:37:46,421 functional 10 139696257410880 
def chunks(task, it, n):
    return 1

DEBUG 2024-03-28 13:37:46,421 functional 11 139782622603072 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

DEBUG 2024-03-28 13:37:46,422 functional 10 139696257410880 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

DEBUG 2024-03-28 13:37:46,422 functional 11 139782622603072 
def backend_cleanup():
    return 1

DEBUG 2024-03-28 13:37:46,422 functional 10 139696257410880 
def backend_cleanup():
    return 1

DEBUG 2024-03-28 13:37:46,423 functional 11 139782622603072 
def get_silpo_products():
    return 1

DEBUG 2024-03-28 13:37:46,423 functional 10 139696257410880 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

DEBUG 2024-03-28 13:37:46,423 functional 11 139782622603072 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

DEBUG 2024-03-28 13:37:46,423 functional 10 139696257410880 
def xmap(task, it):
    return 1

DEBUG 2024-03-28 13:37:46,424 functional 11 139782622603072 
def xmap(task, it):
    return 1

DEBUG 2024-03-28 13:37:46,424 functional 10 139696257410880 
def chain(*args, **kwargs):
    return 1

DEBUG 2024-03-28 13:37:46,424 functional 11 139782622603072 
def chain(*args, **kwargs):
    return 1

DEBUG 2024-03-28 13:37:46,424 functional 10 139696257410880 
def get_tavria_products():
    return 1

DEBUG 2024-03-28 13:37:46,425 functional 11 139782622603072 
def xstarmap(task, it):
    return 1

DEBUG 2024-03-28 13:37:46,425 functional 10 139696257410880 
def xstarmap(task, it):
    return 1

DEBUG 2024-03-28 13:37:46,425 functional 11 139782622603072 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

DEBUG 2024-03-28 13:37:46,425 functional 10 139696257410880 
def get_rozetka_products():
    return 1

DEBUG 2024-03-28 13:37:46,426 functional 11 139782622603072 
def accumulate(self, *args, **kwargs):
    return 1

DEBUG 2024-03-28 13:37:46,426 functional 10 139696257410880 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

DEBUG 2024-03-28 13:37:46,427 functional 10 139696257410880 
def accumulate(self, *args, **kwargs):
    return 1

DEBUG 2024-03-28 13:37:46,427 functional 10 139696257410880 
def get_silpo_products():
    return 1

INFO 2024-03-28 13:37:47,606 autoreload 12 139724913350464 Watching for file changes with StatReloader
DEBUG 2024-03-28 13:38:12,416 functional 11 140710428944192 
def chunks(task, it, n):
    return 1

DEBUG 2024-03-28 13:38:12,417 functional 11 140710428944192 
def get_rozetka_products():
    return 1

DEBUG 2024-03-28 13:38:12,417 functional 11 140710428944192 
def get_tavria_products():
    return 1

DEBUG 2024-03-28 13:38:12,418 functional 10 140372296673088 
def chunks(task, it, n):
    return 1

DEBUG 2024-03-28 13:38:12,418 functional 11 140710428944192 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

DEBUG 2024-03-28 13:38:12,419 functional 10 140372296673088 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

DEBUG 2024-03-28 13:38:12,419 functional 11 140710428944192 
def backend_cleanup():
    return 1

DEBUG 2024-03-28 13:38:12,419 functional 10 140372296673088 
def backend_cleanup():
    return 1

DEBUG 2024-03-28 13:38:12,419 functional 11 140710428944192 
def get_silpo_products():
    return 1

DEBUG 2024-03-28 13:38:12,420 functional 10 140372296673088 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

DEBUG 2024-03-28 13:38:12,420 functional 11 140710428944192 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

DEBUG 2024-03-28 13:38:12,420 functional 10 140372296673088 
def xmap(task, it):
    return 1

DEBUG 2024-03-28 13:38:12,421 functional 11 140710428944192 
def xmap(task, it):
    return 1

DEBUG 2024-03-28 13:38:12,421 functional 10 140372296673088 
def chain(*args, **kwargs):
    return 1

DEBUG 2024-03-28 13:38:12,421 functional 11 140710428944192 
def chain(*args, **kwargs):
    return 1

DEBUG 2024-03-28 13:38:12,422 functional 10 140372296673088 
def get_tavria_products():
    return 1

DEBUG 2024-03-28 13:38:12,422 functional 11 140710428944192 
def xstarmap(task, it):
    return 1

DEBUG 2024-03-28 13:38:12,422 functional 10 140372296673088 
def xstarmap(task, it):
    return 1

DEBUG 2024-03-28 13:38:12,423 functional 11 140710428944192 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

DEBUG 2024-03-28 13:38:12,423 functional 10 140372296673088 
def get_rozetka_products():
    return 1

DEBUG 2024-03-28 13:38:12,424 functional 11 140710428944192 
def accumulate(self, *args, **kwargs):
    return 1

DEBUG 2024-03-28 13:38:12,424 functional 10 140372296673088 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

DEBUG 2024-03-28 13:38:12,425 functional 10 140372296673088 
def accumulate(self, *args, **kwargs):
    return 1

DEBUG 2024-03-28 13:38:12,425 functional 10 140372296673088 
def get_silpo_products():
    return 1

INFO 2024-03-28 13:38:13,599 autoreload 12 140331561580352 Watching for file changes with StatReloader
DEBUG 2024-03-28 13:39:20,889 functional 10 139882200557376 
def chunks(task, it, n):
    return 1

DEBUG 2024-03-28 13:39:20,891 functional 10 139882200557376 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

DEBUG 2024-03-28 13:39:20,891 functional 10 139882200557376 
def backend_cleanup():
    return 1

DEBUG 2024-03-28 13:39:20,892 functional 10 139882200557376 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

DEBUG 2024-03-28 13:39:20,893 functional 10 139882200557376 
def xmap(task, it):
    return 1

DEBUG 2024-03-28 13:39:20,893 functional 10 139882200557376 
def chain(*args, **kwargs):
    return 1

DEBUG 2024-03-28 13:39:20,894 functional 10 139882200557376 
def get_tavria_products():
    return 1

DEBUG 2024-03-28 13:39:20,895 functional 10 139882200557376 
def xstarmap(task, it):
    return 1

DEBUG 2024-03-28 13:39:20,895 functional 10 139882200557376 
def get_rozetka_products():
    return 1

DEBUG 2024-03-28 13:39:20,895 functional 11 139687172134720 
def chunks(task, it, n):
    return 1

DEBUG 2024-03-28 13:39:20,896 functional 10 139882200557376 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

DEBUG 2024-03-28 13:39:20,896 functional 11 139687172134720 
def get_rozetka_products():
    return 1

DEBUG 2024-03-28 13:39:20,897 functional 10 139882200557376 
def accumulate(self, *args, **kwargs):
    return 1

DEBUG 2024-03-28 13:39:20,897 functional 11 139687172134720 
def get_tavria_products():
    return 1

DEBUG 2024-03-28 13:39:20,897 functional 10 139882200557376 
def get_silpo_products():
    return 1

DEBUG 2024-03-28 13:39:20,898 functional 11 139687172134720 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

DEBUG 2024-03-28 13:39:20,898 functional 11 139687172134720 
def backend_cleanup():
    return 1

DEBUG 2024-03-28 13:39:20,899 functional 11 139687172134720 
def get_silpo_products():
    return 1

DEBUG 2024-03-28 13:39:20,900 functional 11 139687172134720 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

DEBUG 2024-03-28 13:39:20,900 functional 11 139687172134720 
def xmap(task, it):
    return 1

DEBUG 2024-03-28 13:39:20,901 functional 11 139687172134720 
def chain(*args, **kwargs):
    return 1

DEBUG 2024-03-28 13:39:20,902 functional 11 139687172134720 
def xstarmap(task, it):
    return 1

DEBUG 2024-03-28 13:39:20,903 functional 11 139687172134720 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

DEBUG 2024-03-28 13:39:20,903 functional 11 139687172134720 
def accumulate(self, *args, **kwargs):
    return 1

INFO 2024-03-28 13:39:22,241 autoreload 12 139653078873920 Watching for file changes with StatReloader
INFO 2024-03-28 13:44:05,054 autoreload 12 139653078873920 /django_proj/aggregator/schema.py changed, reloading.
INFO 2024-03-28 13:44:06,613 autoreload 31 139827933058880 Watching for file changes with StatReloader
INFO 2024-03-28 13:45:31,412 autoreload 31 139827933058880 /django_proj/aggregator/schema.py changed, reloading.
INFO 2024-03-28 13:45:32,950 autoreload 34 139871340242752 Watching for file changes with StatReloader
INFO 2024-03-28 14:16:54,269 autoreload 34 139871340242752 /django_proj/aggregator/schema.py changed, reloading.
INFO 2024-03-28 14:16:55,884 autoreload 55 139854169212736 Watching for file changes with StatReloader
INFO 2024-03-28 14:22:44,967 autoreload 55 139854169212736 /django_proj/aggregator/schema.py changed, reloading.
INFO 2024-03-28 14:22:46,549 autoreload 60 139810455680832 Watching for file changes with StatReloader
INFO 2024-03-28 14:23:12,573 autoreload 60 139810455680832 /django_proj/aggregator/schema.py changed, reloading.
INFO 2024-03-28 14:23:14,187 autoreload 67 140113006511936 Watching for file changes with StatReloader
INFO 2024-03-28 14:24:22,769 autoreload 67 140113006511936 /django_proj/aggregator/schema.py changed, reloading.
INFO 2024-03-28 14:24:24,350 autoreload 71 140549631055680 Watching for file changes with StatReloader
INFO 2024-03-28 15:09:25,191 autoreload 71 140549631055680 /django_proj/aggregator/schema.py changed, reloading.
INFO 2024-03-28 15:09:27,156 autoreload 82 140466894903104 Watching for file changes with StatReloader
INFO 2024-03-28 15:14:46,514 autoreload 82 140466894903104 /django_proj/aggregator/schema.py changed, reloading.
INFO 2024-03-28 15:14:48,271 autoreload 86 139667010639680 Watching for file changes with StatReloader
INFO 2024-03-28 15:15:01,166 autoreload 86 139667010639680 /django_proj/aggregator/schema.py changed, reloading.
INFO 2024-03-28 15:15:02,869 autoreload 89 140153164318528 Watching for file changes with StatReloader
INFO 2024-03-28 15:16:39,458 autoreload 89 140153164318528 /django_proj/aggregator/models.py changed, reloading.
INFO 2024-03-28 15:16:41,019 autoreload 92 140406683596608 Watching for file changes with StatReloader
INFO 2024-03-28 15:23:50,474 autoreload 92 140406683596608 /django_proj/aggregator/schema.py changed, reloading.
INFO 2024-03-28 15:23:52,080 autoreload 102 139682175805248 Watching for file changes with StatReloader
INFO 2024-03-28 15:26:04,921 autoreload 102 139682175805248 /django_proj/aggregator/schema.py changed, reloading.
INFO 2024-03-28 15:26:06,516 autoreload 106 139998259013440 Watching for file changes with StatReloader
INFO 2024-03-28 15:27:08,121 autoreload 106 139998259013440 /django_proj/aggregator/schema.py changed, reloading.
INFO 2024-03-28 15:27:09,748 autoreload 109 140168533964608 Watching for file changes with StatReloader
INFO 2024-03-28 15:28:52,240 autoreload 109 140168533964608 /django_proj/aggregator/schema.py changed, reloading.
INFO 2024-03-28 15:28:53,823 autoreload 112 140441223231296 Watching for file changes with StatReloader
INFO 2024-03-28 15:29:12,904 autoreload 112 140441223231296 /django_proj/aggregator/schema.py changed, reloading.
INFO 2024-03-28 15:29:14,502 autoreload 115 140314809341760 Watching for file changes with StatReloader
INFO 2024-03-28 15:31:06,674 autoreload 115 140314809341760 /django_proj/aggregator/schema.py changed, reloading.
INFO 2024-03-28 15:31:08,273 autoreload 118 139655489955648 Watching for file changes with StatReloader
INFO 2024-03-28 15:32:09,906 autoreload 118 139655489955648 /django_proj/aggregator/schema.py changed, reloading.
INFO 2024-03-28 15:32:11,488 autoreload 121 140111984744256 Watching for file changes with StatReloader
INFO 2024-03-28 15:33:01,625 autoreload 121 140111984744256 /django_proj/aggregator/schema.py changed, reloading.
INFO 2024-03-28 15:33:03,296 autoreload 124 139927219001152 Watching for file changes with StatReloader
INFO 2024-03-28 15:35:34,527 autoreload 124 139927219001152 /django_proj/aggregator/schema.py changed, reloading.
INFO 2024-03-28 15:35:36,191 autoreload 128 140272126367552 Watching for file changes with StatReloader
INFO 2024-03-28 15:36:08,491 autoreload 128 140272126367552 /django_proj/aggregator/schema.py changed, reloading.
INFO 2024-03-28 15:36:10,074 autoreload 131 140035063097152 Watching for file changes with StatReloader
INFO 2024-03-28 15:37:02,226 autoreload 131 140035063097152 /django_proj/aggregator/schema.py changed, reloading.
INFO 2024-03-28 15:37:03,872 autoreload 134 140152847157056 Watching for file changes with StatReloader
INFO 2024-03-28 15:37:44,824 autoreload 134 140152847157056 /django_proj/aggregator/schema.py changed, reloading.
INFO 2024-03-28 15:37:46,389 autoreload 137 139801457092416 Watching for file changes with StatReloader
INFO 2024-03-28 16:55:24,419 autoreload 137 139801457092416 /django_proj/aggregator/schema.py changed, reloading.
INFO 2024-03-28 16:55:26,109 autoreload 169 140068965009216 Watching for file changes with StatReloader
INFO 2024-03-28 17:20:30,264 autoreload 169 140068965009216 /django_proj/aggregator/schema.py changed, reloading.
INFO 2024-03-28 17:20:32,357 autoreload 181 140410046129984 Watching for file changes with StatReloader
INFO 2024-03-28 17:29:14,201 autoreload 181 140410046129984 /django_proj/aggregator/schema.py changed, reloading.
INFO 2024-03-28 17:29:15,875 autoreload 196 140546455856960 Watching for file changes with StatReloader
INFO 2024-03-28 17:29:53,844 autoreload 196 140546455856960 /django_proj/aggregator/schema.py changed, reloading.
INFO 2024-03-28 17:29:55,491 autoreload 202 139787747153728 Watching for file changes with StatReloader
INFO 2024-03-28 18:25:59,919 autoreload 202 139787747153728 /django_proj/aggregator/schema.py changed, reloading.
INFO 2024-03-28 18:26:02,053 autoreload 240 140398727116608 Watching for file changes with StatReloader
INFO 2024-03-28 18:39:46,720 autoreload 240 140398727116608 /django_proj/aggregator/schema.py changed, reloading.
INFO 2024-03-28 18:39:48,335 autoreload 246 140662985369408 Watching for file changes with StatReloader
DEBUG 2024-03-29 09:53:42,178 functional 10 140273760712512 
def chunks(task, it, n):
    return 1

DEBUG 2024-03-29 09:53:42,179 functional 10 140273760712512 
def get_silpo_products():
    return 1

DEBUG 2024-03-29 09:53:42,180 functional 10 140273760712512 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

DEBUG 2024-03-29 09:53:42,181 functional 10 140273760712512 
def backend_cleanup():
    return 1

DEBUG 2024-03-29 09:53:42,182 functional 10 140273760712512 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

DEBUG 2024-03-29 09:53:42,182 functional 11 140443771516736 
def chunks(task, it, n):
    return 1

DEBUG 2024-03-29 09:53:42,183 functional 10 140273760712512 
def xmap(task, it):
    return 1

DEBUG 2024-03-29 09:53:42,183 functional 11 140443771516736 
def get_silpo_products():
    return 1

DEBUG 2024-03-29 09:53:42,184 functional 10 140273760712512 
def get_rozetka_products():
    return 1

DEBUG 2024-03-29 09:53:42,184 functional 11 140443771516736 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

DEBUG 2024-03-29 09:53:42,185 functional 10 140273760712512 
def chain(*args, **kwargs):
    return 1

DEBUG 2024-03-29 09:53:42,185 functional 11 140443771516736 
def backend_cleanup():
    return 1

DEBUG 2024-03-29 09:53:42,186 functional 10 140273760712512 
def get_tavria_products():
    return 1

DEBUG 2024-03-29 09:53:42,186 functional 11 140443771516736 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

DEBUG 2024-03-29 09:53:42,186 functional 10 140273760712512 
def xstarmap(task, it):
    return 1

DEBUG 2024-03-29 09:53:42,187 functional 11 140443771516736 
def xmap(task, it):
    return 1

DEBUG 2024-03-29 09:53:42,187 functional 10 140273760712512 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

DEBUG 2024-03-29 09:53:42,188 functional 11 140443771516736 
def chain(*args, **kwargs):
    return 1

DEBUG 2024-03-29 09:53:42,188 functional 10 140273760712512 
def accumulate(self, *args, **kwargs):
    return 1

DEBUG 2024-03-29 09:53:42,189 functional 11 140443771516736 
def xstarmap(task, it):
    return 1

DEBUG 2024-03-29 09:53:42,189 functional 11 140443771516736 
def get_tavria_products():
    return 1

DEBUG 2024-03-29 09:53:42,190 functional 11 140443771516736 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

DEBUG 2024-03-29 09:53:42,191 functional 11 140443771516736 
def accumulate(self, *args, **kwargs):
    return 1

DEBUG 2024-03-29 09:53:42,192 functional 11 140443771516736 
def get_rozetka_products():
    return 1

INFO 2024-03-29 09:53:43,413 autoreload 12 140229181441856 Watching for file changes with StatReloader
INFO 2024-03-29 10:01:50,060 autoreload 12 140229181441856 /django_proj/backend/settings.py changed, reloading.
INFO 2024-03-29 10:01:51,676 autoreload 48 140087510169408 Watching for file changes with StatReloader
DEBUG 2024-03-29 12:05:32,104 functional 10 140279380481856 
def chunks(task, it, n):
    return 1

DEBUG 2024-03-29 12:05:32,104 functional 11 140079190312768 
def chunks(task, it, n):
    return 1

DEBUG 2024-03-29 12:05:32,117 functional 11 140079190312768 
def get_rozetka_products():
    return 1

DEBUG 2024-03-29 12:05:32,117 functional 10 140279380481856 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

DEBUG 2024-03-29 12:05:32,118 functional 11 140079190312768 
def get_tavria_products():
    return 1

DEBUG 2024-03-29 12:05:32,118 functional 10 140279380481856 
def backend_cleanup():
    return 1

DEBUG 2024-03-29 12:05:32,118 functional 11 140079190312768 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

DEBUG 2024-03-29 12:05:32,119 functional 10 140279380481856 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

DEBUG 2024-03-29 12:05:32,119 functional 11 140079190312768 
def backend_cleanup():
    return 1

DEBUG 2024-03-29 12:05:32,120 functional 10 140279380481856 
def xmap(task, it):
    return 1

DEBUG 2024-03-29 12:05:32,120 functional 11 140079190312768 
def get_silpo_products():
    return 1

DEBUG 2024-03-29 12:05:32,121 functional 10 140279380481856 
def chain(*args, **kwargs):
    return 1

DEBUG 2024-03-29 12:05:32,121 functional 11 140079190312768 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

DEBUG 2024-03-29 12:05:32,122 functional 10 140279380481856 
def get_tavria_products():
    return 1

DEBUG 2024-03-29 12:05:32,122 functional 11 140079190312768 
def xmap(task, it):
    return 1

DEBUG 2024-03-29 12:05:32,123 functional 10 140279380481856 
def xstarmap(task, it):
    return 1

DEBUG 2024-03-29 12:05:32,123 functional 11 140079190312768 
def chain(*args, **kwargs):
    return 1

DEBUG 2024-03-29 12:05:32,124 functional 11 140079190312768 
def xstarmap(task, it):
    return 1

DEBUG 2024-03-29 12:05:32,124 functional 10 140279380481856 
def get_rozetka_products():
    return 1

DEBUG 2024-03-29 12:05:32,125 functional 10 140279380481856 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

DEBUG 2024-03-29 12:05:32,125 functional 11 140079190312768 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

DEBUG 2024-03-29 12:05:32,126 functional 10 140279380481856 
def accumulate(self, *args, **kwargs):
    return 1

DEBUG 2024-03-29 12:05:32,127 functional 10 140279380481856 
def get_silpo_products():
    return 1

DEBUG 2024-03-29 12:05:32,127 functional 11 140079190312768 
def accumulate(self, *args, **kwargs):
    return 1

INFO 2024-03-29 12:05:34,545 autoreload 12 140039721953088 Watching for file changes with StatReloader
DEBUG 2024-03-29 12:13:17,518 functional 11 139624881940288 
def chunks(task, it, n):
    return 1

DEBUG 2024-03-29 12:13:17,521 functional 10 139919370614592 
def chunks(task, it, n):
    return 1

DEBUG 2024-03-29 12:13:17,524 functional 11 139624881940288 
def get_rozetka_products():
    return 1

DEBUG 2024-03-29 12:13:17,525 functional 10 139919370614592 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

DEBUG 2024-03-29 12:13:17,525 functional 11 139624881940288 
def get_tavria_products():
    return 1

DEBUG 2024-03-29 12:13:17,525 functional 10 139919370614592 
def backend_cleanup():
    return 1

DEBUG 2024-03-29 12:13:17,526 functional 10 139919370614592 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

DEBUG 2024-03-29 12:13:17,526 functional 11 139624881940288 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

DEBUG 2024-03-29 12:13:17,526 functional 10 139919370614592 
def xmap(task, it):
    return 1

DEBUG 2024-03-29 12:13:17,526 functional 11 139624881940288 
def backend_cleanup():
    return 1

DEBUG 2024-03-29 12:13:17,527 functional 11 139624881940288 
def get_silpo_products():
    return 1

DEBUG 2024-03-29 12:13:17,527 functional 10 139919370614592 
def chain(*args, **kwargs):
    return 1

DEBUG 2024-03-29 12:13:17,528 functional 11 139624881940288 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

DEBUG 2024-03-29 12:13:17,528 functional 10 139919370614592 
def get_tavria_products():
    return 1

DEBUG 2024-03-29 12:13:17,528 functional 10 139919370614592 
def xstarmap(task, it):
    return 1

DEBUG 2024-03-29 12:13:17,528 functional 11 139624881940288 
def xmap(task, it):
    return 1

DEBUG 2024-03-29 12:13:17,529 functional 10 139919370614592 
def get_rozetka_products():
    return 1

DEBUG 2024-03-29 12:13:17,529 functional 11 139624881940288 
def chain(*args, **kwargs):
    return 1

DEBUG 2024-03-29 12:13:17,529 functional 10 139919370614592 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

DEBUG 2024-03-29 12:13:17,529 functional 11 139624881940288 
def xstarmap(task, it):
    return 1

DEBUG 2024-03-29 12:13:17,530 functional 10 139919370614592 
def accumulate(self, *args, **kwargs):
    return 1

DEBUG 2024-03-29 12:13:17,530 functional 11 139624881940288 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

DEBUG 2024-03-29 12:13:17,531 functional 10 139919370614592 
def get_silpo_products():
    return 1

DEBUG 2024-03-29 12:13:17,531 functional 11 139624881940288 
def accumulate(self, *args, **kwargs):
    return 1

INFO 2024-03-29 12:13:18,698 autoreload 12 140630820042560 Watching for file changes with StatReloader
INFO 2024-03-29 12:24:58,470 autoreload 12 140630820042560 /django_proj/backend/settings.py changed, reloading.
INFO 2024-03-29 12:25:00,221 autoreload 38 139975469815616 Watching for file changes with StatReloader
INFO 2024-03-29 12:25:17,942 autoreload 38 139975469815616 /django_proj/backend/settings.py changed, reloading.
INFO 2024-03-29 12:25:19,612 autoreload 43 140185562789696 Watching for file changes with StatReloader
INFO 2024-03-29 12:28:33,710 autoreload 43 140185562789696 /django_proj/backend/settings.py changed, reloading.
INFO 2024-03-29 12:28:35,339 autoreload 49 139888519612224 Watching for file changes with StatReloader
INFO 2024-03-29 12:28:42,900 autoreload 49 139888519612224 /django_proj/backend/settings.py changed, reloading.
INFO 2024-03-29 12:28:44,626 autoreload 54 140146177259328 Watching for file changes with StatReloader
DEBUG 2024-03-29 12:30:21,599 functional 10 139720116209472 
def chunks(task, it, n):
    return 1

DEBUG 2024-03-29 12:30:21,601 functional 10 139720116209472 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

DEBUG 2024-03-29 12:30:21,601 functional 10 139720116209472 
def backend_cleanup():
    return 1

DEBUG 2024-03-29 12:30:21,602 functional 10 139720116209472 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

DEBUG 2024-03-29 12:30:21,603 functional 10 139720116209472 
def xmap(task, it):
    return 1

DEBUG 2024-03-29 12:30:21,603 functional 11 140067781904192 
def chunks(task, it, n):
    return 1

DEBUG 2024-03-29 12:30:21,603 functional 10 139720116209472 
def chain(*args, **kwargs):
    return 1

DEBUG 2024-03-29 12:30:21,603 functional 11 140067781904192 
def get_rozetka_products():
    return 1

DEBUG 2024-03-29 12:30:21,604 functional 10 139720116209472 
def get_tavria_products():
    return 1

DEBUG 2024-03-29 12:30:21,604 functional 11 140067781904192 
def get_tavria_products():
    return 1

DEBUG 2024-03-29 12:30:21,604 functional 10 139720116209472 
def xstarmap(task, it):
    return 1

DEBUG 2024-03-29 12:30:21,605 functional 11 140067781904192 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

DEBUG 2024-03-29 12:30:21,605 functional 10 139720116209472 
def get_rozetka_products():
    return 1

DEBUG 2024-03-29 12:30:21,605 functional 11 140067781904192 
def backend_cleanup():
    return 1

DEBUG 2024-03-29 12:30:21,605 functional 10 139720116209472 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

DEBUG 2024-03-29 12:30:21,606 functional 11 140067781904192 
def get_silpo_products():
    return 1

DEBUG 2024-03-29 12:30:21,606 functional 10 139720116209472 
def accumulate(self, *args, **kwargs):
    return 1

DEBUG 2024-03-29 12:30:21,606 functional 11 140067781904192 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

DEBUG 2024-03-29 12:30:21,607 functional 10 139720116209472 
def get_silpo_products():
    return 1

DEBUG 2024-03-29 12:30:21,607 functional 11 140067781904192 
def xmap(task, it):
    return 1

DEBUG 2024-03-29 12:30:21,608 functional 11 140067781904192 
def chain(*args, **kwargs):
    return 1

DEBUG 2024-03-29 12:30:21,608 functional 11 140067781904192 
def xstarmap(task, it):
    return 1

DEBUG 2024-03-29 12:30:21,609 functional 11 140067781904192 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

DEBUG 2024-03-29 12:30:21,609 functional 11 140067781904192 
def accumulate(self, *args, **kwargs):
    return 1

INFO 2024-03-29 12:30:22,786 autoreload 12 139786006013760 Watching for file changes with StatReloader
INFO 2024-03-29 12:40:22,065 autoreload 12 139786006013760 /django_proj/aggregator/managers.py changed, reloading.
INFO 2024-03-29 12:40:23,869 autoreload 30 140023972009792 Watching for file changes with StatReloader
DEBUG 2024-03-29 12:47:03,602 functional 10 139912652019520 
def chunks(task, it, n):
    return 1

DEBUG 2024-03-29 12:47:03,603 functional 10 139912652019520 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

DEBUG 2024-03-29 12:47:03,604 functional 10 139912652019520 
def backend_cleanup():
    return 1

DEBUG 2024-03-29 12:47:03,604 functional 10 139912652019520 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

DEBUG 2024-03-29 12:47:03,605 functional 10 139912652019520 
def xmap(task, it):
    return 1

DEBUG 2024-03-29 12:47:03,605 functional 10 139912652019520 
def chain(*args, **kwargs):
    return 1

DEBUG 2024-03-29 12:47:03,606 functional 10 139912652019520 
def get_tavria_products():
    return 1

DEBUG 2024-03-29 12:47:03,606 functional 10 139912652019520 
def xstarmap(task, it):
    return 1

DEBUG 2024-03-29 12:47:03,607 functional 10 139912652019520 
def get_rozetka_products():
    return 1

DEBUG 2024-03-29 12:47:03,607 functional 10 139912652019520 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

DEBUG 2024-03-29 12:47:03,608 functional 10 139912652019520 
def accumulate(self, *args, **kwargs):
    return 1

DEBUG 2024-03-29 12:47:03,608 functional 10 139912652019520 
def get_silpo_products():
    return 1

DEBUG 2024-03-29 12:47:03,621 functional 11 139881191397184 
def chunks(task, it, n):
    return 1

DEBUG 2024-03-29 12:47:03,622 functional 11 139881191397184 
def get_rozetka_products():
    return 1

DEBUG 2024-03-29 12:47:03,622 functional 11 139881191397184 
def get_tavria_products():
    return 1

DEBUG 2024-03-29 12:47:03,623 functional 11 139881191397184 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

DEBUG 2024-03-29 12:47:03,623 functional 11 139881191397184 
def backend_cleanup():
    return 1

DEBUG 2024-03-29 12:47:03,624 functional 11 139881191397184 
def get_silpo_products():
    return 1

DEBUG 2024-03-29 12:47:03,624 functional 11 139881191397184 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

DEBUG 2024-03-29 12:47:03,625 functional 11 139881191397184 
def xmap(task, it):
    return 1

DEBUG 2024-03-29 12:47:03,625 functional 11 139881191397184 
def chain(*args, **kwargs):
    return 1

DEBUG 2024-03-29 12:47:03,626 functional 11 139881191397184 
def xstarmap(task, it):
    return 1

DEBUG 2024-03-29 12:47:03,626 functional 11 139881191397184 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

DEBUG 2024-03-29 12:47:03,627 functional 11 139881191397184 
def accumulate(self, *args, **kwargs):
    return 1

INFO 2024-03-29 12:47:04,697 autoreload 12 139919851276096 Watching for file changes with StatReloader
DEBUG 2024-03-29 12:49:16,366 functional 10 140681696372544 
def chunks(task, it, n):
    return 1

DEBUG 2024-03-29 12:49:16,367 functional 10 140681696372544 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

DEBUG 2024-03-29 12:49:16,368 functional 10 140681696372544 
def backend_cleanup():
    return 1

DEBUG 2024-03-29 12:49:16,368 functional 10 140681696372544 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

DEBUG 2024-03-29 12:49:16,369 functional 10 140681696372544 
def xmap(task, it):
    return 1

DEBUG 2024-03-29 12:49:16,369 functional 10 140681696372544 
def chain(*args, **kwargs):
    return 1

DEBUG 2024-03-29 12:49:16,370 functional 10 140681696372544 
def get_tavria_products():
    return 1

DEBUG 2024-03-29 12:49:16,370 functional 10 140681696372544 
def xstarmap(task, it):
    return 1

DEBUG 2024-03-29 12:49:16,371 functional 10 140681696372544 
def get_rozetka_products():
    return 1

DEBUG 2024-03-29 12:49:16,372 functional 10 140681696372544 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

DEBUG 2024-03-29 12:49:16,372 functional 11 140155638851392 
def chunks(task, it, n):
    return 1

DEBUG 2024-03-29 12:49:16,372 functional 10 140681696372544 
def accumulate(self, *args, **kwargs):
    return 1

DEBUG 2024-03-29 12:49:16,373 functional 10 140681696372544 
def get_silpo_products():
    return 1

DEBUG 2024-03-29 12:49:16,373 functional 11 140155638851392 
def get_rozetka_products():
    return 1

DEBUG 2024-03-29 12:49:16,373 functional 11 140155638851392 
def get_tavria_products():
    return 1

DEBUG 2024-03-29 12:49:16,374 functional 11 140155638851392 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

DEBUG 2024-03-29 12:49:16,375 functional 11 140155638851392 
def backend_cleanup():
    return 1

DEBUG 2024-03-29 12:49:16,375 functional 11 140155638851392 
def get_silpo_products():
    return 1

DEBUG 2024-03-29 12:49:16,376 functional 11 140155638851392 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

DEBUG 2024-03-29 12:49:16,376 functional 11 140155638851392 
def xmap(task, it):
    return 1

DEBUG 2024-03-29 12:49:16,377 functional 11 140155638851392 
def chain(*args, **kwargs):
    return 1

DEBUG 2024-03-29 12:49:16,378 functional 11 140155638851392 
def xstarmap(task, it):
    return 1

DEBUG 2024-03-29 12:49:16,378 functional 11 140155638851392 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

DEBUG 2024-03-29 12:49:16,379 functional 11 140155638851392 
def accumulate(self, *args, **kwargs):
    return 1

INFO 2024-03-29 12:49:17,493 autoreload 12 140235895367488 Watching for file changes with StatReloader
DEBUG 2024-03-29 16:16:50,141 functional 10 140077007742784 
def chunks(task, it, n):
    return 1

DEBUG 2024-03-29 16:16:50,142 functional 10 140077007742784 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

DEBUG 2024-03-29 16:16:50,143 functional 10 140077007742784 
def backend_cleanup():
    return 1

DEBUG 2024-03-29 16:16:50,143 functional 10 140077007742784 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

DEBUG 2024-03-29 16:16:50,144 functional 11 139967580886848 
def chunks(task, it, n):
    return 1

DEBUG 2024-03-29 16:16:50,144 functional 10 140077007742784 
def xmap(task, it):
    return 1

DEBUG 2024-03-29 16:16:50,144 functional 11 139967580886848 
def get_rozetka_products():
    return 1

DEBUG 2024-03-29 16:16:50,144 functional 10 140077007742784 
def chain(*args, **kwargs):
    return 1

DEBUG 2024-03-29 16:16:50,145 functional 11 139967580886848 
def get_tavria_products():
    return 1

DEBUG 2024-03-29 16:16:50,145 functional 10 140077007742784 
def get_tavria_products():
    return 1

DEBUG 2024-03-29 16:16:50,145 functional 11 139967580886848 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

DEBUG 2024-03-29 16:16:50,145 functional 10 140077007742784 
def xstarmap(task, it):
    return 1

DEBUG 2024-03-29 16:16:50,146 functional 11 139967580886848 
def backend_cleanup():
    return 1

DEBUG 2024-03-29 16:16:50,146 functional 10 140077007742784 
def get_rozetka_products():
    return 1

DEBUG 2024-03-29 16:16:50,147 functional 11 139967580886848 
def get_silpo_products():
    return 1

DEBUG 2024-03-29 16:16:50,147 functional 10 140077007742784 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

DEBUG 2024-03-29 16:16:50,147 functional 10 140077007742784 
def accumulate(self, *args, **kwargs):
    return 1

DEBUG 2024-03-29 16:16:50,147 functional 11 139967580886848 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

DEBUG 2024-03-29 16:16:50,148 functional 10 140077007742784 
def get_silpo_products():
    return 1

DEBUG 2024-03-29 16:16:50,148 functional 11 139967580886848 
def xmap(task, it):
    return 1

DEBUG 2024-03-29 16:16:50,148 functional 11 139967580886848 
def chain(*args, **kwargs):
    return 1

DEBUG 2024-03-29 16:16:50,149 functional 11 139967580886848 
def xstarmap(task, it):
    return 1

DEBUG 2024-03-29 16:16:50,149 functional 11 139967580886848 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

DEBUG 2024-03-29 16:16:50,150 functional 11 139967580886848 
def accumulate(self, *args, **kwargs):
    return 1

INFO 2024-03-29 16:16:51,299 autoreload 12 140066080094016 Watching for file changes with StatReloader
INFO 2024-03-29 16:18:52,498 autoreload 12 140066080094016 /django_proj/users/schema.py changed, reloading.
INFO 2024-03-29 16:18:54,260 autoreload 29 139810465773376 Watching for file changes with StatReloader
DEBUG 2024-03-29 18:17:55,848 functional 10 140537059895104 
def chunks(task, it, n):
    return 1

DEBUG 2024-03-29 18:17:55,849 functional 10 140537059895104 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

DEBUG 2024-03-29 18:17:55,849 functional 10 140537059895104 
def backend_cleanup():
    return 1

DEBUG 2024-03-29 18:17:55,850 functional 10 140537059895104 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

DEBUG 2024-03-29 18:17:55,850 functional 10 140537059895104 
def xmap(task, it):
    return 1

DEBUG 2024-03-29 18:17:55,851 functional 10 140537059895104 
def chain(*args, **kwargs):
    return 1

DEBUG 2024-03-29 18:17:55,852 functional 10 140537059895104 
def get_tavria_products():
    return 1

DEBUG 2024-03-29 18:17:55,852 functional 10 140537059895104 
def xstarmap(task, it):
    return 1

DEBUG 2024-03-29 18:17:55,853 functional 10 140537059895104 
def get_rozetka_products():
    return 1

DEBUG 2024-03-29 18:17:55,853 functional 10 140537059895104 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

DEBUG 2024-03-29 18:17:55,854 functional 10 140537059895104 
def accumulate(self, *args, **kwargs):
    return 1

DEBUG 2024-03-29 18:17:55,855 functional 10 140537059895104 
def get_silpo_products():
    return 1

DEBUG 2024-03-29 18:17:55,863 functional 11 140151057082176 
def chunks(task, it, n):
    return 1

DEBUG 2024-03-29 18:17:55,864 functional 11 140151057082176 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

DEBUG 2024-03-29 18:17:55,865 functional 11 140151057082176 
def backend_cleanup():
    return 1

DEBUG 2024-03-29 18:17:55,866 functional 11 140151057082176 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

DEBUG 2024-03-29 18:17:55,866 functional 11 140151057082176 
def get_silpo_products():
    return 1

DEBUG 2024-03-29 18:17:55,867 functional 11 140151057082176 
def xmap(task, it):
    return 1

DEBUG 2024-03-29 18:17:55,867 functional 11 140151057082176 
def get_tavria_products():
    return 1

DEBUG 2024-03-29 18:17:55,868 functional 11 140151057082176 
def chain(*args, **kwargs):
    return 1

DEBUG 2024-03-29 18:17:55,869 functional 11 140151057082176 
def get_rozetka_products():
    return 1

DEBUG 2024-03-29 18:17:55,869 functional 11 140151057082176 
def xstarmap(task, it):
    return 1

DEBUG 2024-03-29 18:17:55,870 functional 11 140151057082176 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

DEBUG 2024-03-29 18:17:55,870 functional 11 140151057082176 
def accumulate(self, *args, **kwargs):
    return 1

INFO 2024-03-29 18:17:57,063 autoreload 12 139876074202944 Watching for file changes with StatReloader
INFO 2024-03-29 18:50:06,973 autoreload 12 139876074202944 /django_proj/users/schema.py changed, reloading.
INFO 2024-03-29 18:50:08,721 autoreload 50 140706822965056 Watching for file changes with StatReloader
INFO 2024-03-29 18:51:06,701 autoreload 50 140706822965056 /django_proj/users/schema.py changed, reloading.
INFO 2024-03-29 18:51:08,402 autoreload 54 140575507449664 Watching for file changes with StatReloader
INFO 2024-03-29 18:53:48,297 autoreload 54 140575507449664 /django_proj/users/schema.py changed, reloading.
INFO 2024-03-29 18:53:50,110 autoreload 59 139978399954752 Watching for file changes with StatReloader
INFO 2024-03-29 19:06:19,991 autoreload 59 139978399954752 /django_proj/users/schema.py changed, reloading.
INFO 2024-03-29 19:06:21,723 autoreload 70 140650048534336 Watching for file changes with StatReloader
INFO 2024-03-29 19:20:55,755 autoreload 70 140650048534336 /django_proj/users/schema.py changed, reloading.
INFO 2024-03-29 19:20:57,504 autoreload 91 139853335934784 Watching for file changes with StatReloader
DEBUG 2024-03-30 09:23:35,633 functional 10 140074186159936 
def chunks(task, it, n):
    return 1

DEBUG 2024-03-30 09:23:35,634 functional 10 140074186159936 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

DEBUG 2024-03-30 09:23:35,635 functional 11 139992856958784 
def chunks(task, it, n):
    return 1

DEBUG 2024-03-30 09:23:35,635 functional 10 140074186159936 
def backend_cleanup():
    return 1

DEBUG 2024-03-30 09:23:35,636 functional 11 139992856958784 
def get_rozetka_products():
    return 1

DEBUG 2024-03-30 09:23:35,636 functional 10 140074186159936 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

DEBUG 2024-03-30 09:23:35,636 functional 10 140074186159936 
def xmap(task, it):
    return 1

DEBUG 2024-03-30 09:23:35,636 functional 11 139992856958784 
def get_tavria_products():
    return 1

DEBUG 2024-03-30 09:23:35,637 functional 10 140074186159936 
def chain(*args, **kwargs):
    return 1

DEBUG 2024-03-30 09:23:35,637 functional 11 139992856958784 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

DEBUG 2024-03-30 09:23:35,638 functional 10 140074186159936 
def get_tavria_products():
    return 1

DEBUG 2024-03-30 09:23:35,638 functional 11 139992856958784 
def backend_cleanup():
    return 1

DEBUG 2024-03-30 09:23:35,638 functional 11 139992856958784 
def get_silpo_products():
    return 1

DEBUG 2024-03-30 09:23:35,638 functional 10 140074186159936 
def xstarmap(task, it):
    return 1

DEBUG 2024-03-30 09:23:35,639 functional 11 139992856958784 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

DEBUG 2024-03-30 09:23:35,639 functional 10 140074186159936 
def get_rozetka_products():
    return 1

DEBUG 2024-03-30 09:23:35,640 functional 10 140074186159936 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

DEBUG 2024-03-30 09:23:35,640 functional 11 139992856958784 
def xmap(task, it):
    return 1

DEBUG 2024-03-30 09:23:35,640 functional 11 139992856958784 
def chain(*args, **kwargs):
    return 1

DEBUG 2024-03-30 09:23:35,640 functional 10 140074186159936 
def accumulate(self, *args, **kwargs):
    return 1

DEBUG 2024-03-30 09:23:35,641 functional 11 139992856958784 
def xstarmap(task, it):
    return 1

DEBUG 2024-03-30 09:23:35,641 functional 10 140074186159936 
def get_silpo_products():
    return 1

DEBUG 2024-03-30 09:23:35,641 functional 11 139992856958784 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

DEBUG 2024-03-30 09:23:35,642 functional 11 139992856958784 
def accumulate(self, *args, **kwargs):
    return 1

INFO 2024-03-30 09:23:36,798 autoreload 12 139824668014400 Watching for file changes with StatReloader
INFO 2024-03-30 15:15:27,544 autoreload 12 139824668014400 /django_proj/users/schema.py changed, reloading.
INFO 2024-03-30 15:15:30,177 autoreload 57 140245104781120 Watching for file changes with StatReloader
ERROR 2024-03-30 18:47:21,508 signal 11 140288021702464 Signal handler <promise@0x7f9758556a20 --> <bound method Celery._autodiscover_tasks of <Celery backend at 0x7f97594465c0>>> raised: ModuleNotFoundError("No module named 'aiohttp'")
Traceback (most recent call last):
  File "/usr/local/lib/python3.10/site-packages/celery/utils/dispatch/signal.py", line 276, in send
    response = receiver(signal=self, sender=sender, **named)
  File "/usr/local/lib/python3.10/site-packages/vine/promises.py", line 161, in __call__
    return self.throw()
  File "/usr/local/lib/python3.10/site-packages/vine/promises.py", line 158, in __call__
    retval = fun(*final_args, **final_kwargs)
  File "/usr/local/lib/python3.10/site-packages/celery/app/base.py", line 692, in _autodiscover_tasks
    return self._autodiscover_tasks_from_fixups(related_name)
  File "/usr/local/lib/python3.10/site-packages/celery/app/base.py", line 701, in _autodiscover_tasks_from_fixups
    return self._autodiscover_tasks_from_names([
  File "/usr/local/lib/python3.10/site-packages/celery/app/base.py", line 696, in _autodiscover_tasks_from_names
    return self.loader.autodiscover_tasks(
  File "/usr/local/lib/python3.10/site-packages/celery/loaders/base.py", line 220, in autodiscover_tasks
    mod.__name__ for mod in autodiscover_tasks(packages or (),
  File "/usr/local/lib/python3.10/site-packages/celery/loaders/base.py", line 246, in autodiscover_tasks
    return [find_related_module(pkg, related_name) for pkg in packages]
  File "/usr/local/lib/python3.10/site-packages/celery/loaders/base.py", line 246, in <listcomp>
    return [find_related_module(pkg, related_name) for pkg in packages]
  File "/usr/local/lib/python3.10/site-packages/celery/loaders/base.py", line 278, in find_related_module
    raise e
  File "/usr/local/lib/python3.10/site-packages/celery/loaders/base.py", line 270, in find_related_module
    return importlib.import_module(module_name)
  File "/usr/local/lib/python3.10/importlib/__init__.py", line 126, in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
  File "<frozen importlib._bootstrap>", line 1050, in _gcd_import
  File "<frozen importlib._bootstrap>", line 1027, in _find_and_load
  File "<frozen importlib._bootstrap>", line 1006, in _find_and_load_unlocked
  File "<frozen importlib._bootstrap>", line 688, in _load_unlocked
  File "<frozen importlib._bootstrap_external>", line 883, in exec_module
  File "<frozen importlib._bootstrap>", line 241, in _call_with_frames_removed
  File "/django_proj/aggregator/tasks.py", line 2, in <module>
    from aggregator.parse import silpo, rozetka, tavria
  File "/django_proj/aggregator/parse/silpo.py", line 2, in <module>
    import aiohttp
ModuleNotFoundError: No module named 'aiohttp'
ERROR 2024-03-30 18:47:21,509 signal 10 140428498888512 Signal handler <promise@0x7fb80d6d2a20 --> <bound method Celery._autodiscover_tasks of <Celery backend at 0x7fb80dad8ac0>>> raised: ModuleNotFoundError("No module named 'aiohttp'")
Traceback (most recent call last):
  File "/usr/local/lib/python3.10/site-packages/celery/utils/dispatch/signal.py", line 276, in send
    response = receiver(signal=self, sender=sender, **named)
  File "/usr/local/lib/python3.10/site-packages/vine/promises.py", line 161, in __call__
    return self.throw()
  File "/usr/local/lib/python3.10/site-packages/vine/promises.py", line 158, in __call__
    retval = fun(*final_args, **final_kwargs)
  File "/usr/local/lib/python3.10/site-packages/celery/app/base.py", line 692, in _autodiscover_tasks
    return self._autodiscover_tasks_from_fixups(related_name)
  File "/usr/local/lib/python3.10/site-packages/celery/app/base.py", line 701, in _autodiscover_tasks_from_fixups
    return self._autodiscover_tasks_from_names([
  File "/usr/local/lib/python3.10/site-packages/celery/app/base.py", line 696, in _autodiscover_tasks_from_names
    return self.loader.autodiscover_tasks(
  File "/usr/local/lib/python3.10/site-packages/celery/loaders/base.py", line 220, in autodiscover_tasks
    mod.__name__ for mod in autodiscover_tasks(packages or (),
  File "/usr/local/lib/python3.10/site-packages/celery/loaders/base.py", line 246, in autodiscover_tasks
    return [find_related_module(pkg, related_name) for pkg in packages]
  File "/usr/local/lib/python3.10/site-packages/celery/loaders/base.py", line 246, in <listcomp>
    return [find_related_module(pkg, related_name) for pkg in packages]
  File "/usr/local/lib/python3.10/site-packages/celery/loaders/base.py", line 278, in find_related_module
    raise e
  File "/usr/local/lib/python3.10/site-packages/celery/loaders/base.py", line 270, in find_related_module
    return importlib.import_module(module_name)
  File "/usr/local/lib/python3.10/importlib/__init__.py", line 126, in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
  File "<frozen importlib._bootstrap>", line 1050, in _gcd_import
  File "<frozen importlib._bootstrap>", line 1027, in _find_and_load
  File "<frozen importlib._bootstrap>", line 1006, in _find_and_load_unlocked
  File "<frozen importlib._bootstrap>", line 688, in _load_unlocked
  File "<frozen importlib._bootstrap_external>", line 883, in exec_module
  File "<frozen importlib._bootstrap>", line 241, in _call_with_frames_removed
  File "/django_proj/aggregator/tasks.py", line 2, in <module>
    from aggregator.parse import silpo, rozetka, tavria
  File "/django_proj/aggregator/parse/silpo.py", line 2, in <module>
    import aiohttp
ModuleNotFoundError: No module named 'aiohttp'
ERROR 2024-03-30 18:47:29,419 signal 10 139900476188480 Signal handler <promise@0x7f3d1cd22a20 --> <bound method Celery._autodiscover_tasks of <Celery backend at 0x7f3d1d128ac0>>> raised: ModuleNotFoundError("No module named 'aiohttp'")
Traceback (most recent call last):
  File "/usr/local/lib/python3.10/site-packages/celery/utils/dispatch/signal.py", line 276, in send
    response = receiver(signal=self, sender=sender, **named)
  File "/usr/local/lib/python3.10/site-packages/vine/promises.py", line 161, in __call__
    return self.throw()
  File "/usr/local/lib/python3.10/site-packages/vine/promises.py", line 158, in __call__
    retval = fun(*final_args, **final_kwargs)
  File "/usr/local/lib/python3.10/site-packages/celery/app/base.py", line 692, in _autodiscover_tasks
    return self._autodiscover_tasks_from_fixups(related_name)
  File "/usr/local/lib/python3.10/site-packages/celery/app/base.py", line 701, in _autodiscover_tasks_from_fixups
    return self._autodiscover_tasks_from_names([
  File "/usr/local/lib/python3.10/site-packages/celery/app/base.py", line 696, in _autodiscover_tasks_from_names
    return self.loader.autodiscover_tasks(
  File "/usr/local/lib/python3.10/site-packages/celery/loaders/base.py", line 220, in autodiscover_tasks
    mod.__name__ for mod in autodiscover_tasks(packages or (),
  File "/usr/local/lib/python3.10/site-packages/celery/loaders/base.py", line 246, in autodiscover_tasks
    return [find_related_module(pkg, related_name) for pkg in packages]
  File "/usr/local/lib/python3.10/site-packages/celery/loaders/base.py", line 246, in <listcomp>
    return [find_related_module(pkg, related_name) for pkg in packages]
  File "/usr/local/lib/python3.10/site-packages/celery/loaders/base.py", line 278, in find_related_module
    raise e
  File "/usr/local/lib/python3.10/site-packages/celery/loaders/base.py", line 270, in find_related_module
    return importlib.import_module(module_name)
  File "/usr/local/lib/python3.10/importlib/__init__.py", line 126, in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
  File "<frozen importlib._bootstrap>", line 1050, in _gcd_import
  File "<frozen importlib._bootstrap>", line 1027, in _find_and_load
  File "<frozen importlib._bootstrap>", line 1006, in _find_and_load_unlocked
  File "<frozen importlib._bootstrap>", line 688, in _load_unlocked
  File "<frozen importlib._bootstrap_external>", line 883, in exec_module
  File "<frozen importlib._bootstrap>", line 241, in _call_with_frames_removed
  File "/django_proj/aggregator/tasks.py", line 2, in <module>
    from aggregator.parse import silpo, rozetka, tavria
  File "/django_proj/aggregator/parse/silpo.py", line 2, in <module>
    import aiohttp
ModuleNotFoundError: No module named 'aiohttp'
ERROR 2024-03-30 18:47:29,419 signal 11 140441384073024 Signal handler <promise@0x7fbb0d71aa20 --> <bound method Celery._autodiscover_tasks of <Celery backend at 0x7fbb0e60a5c0>>> raised: ModuleNotFoundError("No module named 'aiohttp'")
Traceback (most recent call last):
  File "/usr/local/lib/python3.10/site-packages/celery/utils/dispatch/signal.py", line 276, in send
    response = receiver(signal=self, sender=sender, **named)
  File "/usr/local/lib/python3.10/site-packages/vine/promises.py", line 161, in __call__
    return self.throw()
  File "/usr/local/lib/python3.10/site-packages/vine/promises.py", line 158, in __call__
    retval = fun(*final_args, **final_kwargs)
  File "/usr/local/lib/python3.10/site-packages/celery/app/base.py", line 692, in _autodiscover_tasks
    return self._autodiscover_tasks_from_fixups(related_name)
  File "/usr/local/lib/python3.10/site-packages/celery/app/base.py", line 701, in _autodiscover_tasks_from_fixups
    return self._autodiscover_tasks_from_names([
  File "/usr/local/lib/python3.10/site-packages/celery/app/base.py", line 696, in _autodiscover_tasks_from_names
    return self.loader.autodiscover_tasks(
  File "/usr/local/lib/python3.10/site-packages/celery/loaders/base.py", line 220, in autodiscover_tasks
    mod.__name__ for mod in autodiscover_tasks(packages or (),
  File "/usr/local/lib/python3.10/site-packages/celery/loaders/base.py", line 246, in autodiscover_tasks
    return [find_related_module(pkg, related_name) for pkg in packages]
  File "/usr/local/lib/python3.10/site-packages/celery/loaders/base.py", line 246, in <listcomp>
    return [find_related_module(pkg, related_name) for pkg in packages]
  File "/usr/local/lib/python3.10/site-packages/celery/loaders/base.py", line 278, in find_related_module
    raise e
  File "/usr/local/lib/python3.10/site-packages/celery/loaders/base.py", line 270, in find_related_module
    return importlib.import_module(module_name)
  File "/usr/local/lib/python3.10/importlib/__init__.py", line 126, in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
  File "<frozen importlib._bootstrap>", line 1050, in _gcd_import
  File "<frozen importlib._bootstrap>", line 1027, in _find_and_load
  File "<frozen importlib._bootstrap>", line 1006, in _find_and_load_unlocked
  File "<frozen importlib._bootstrap>", line 688, in _load_unlocked
  File "<frozen importlib._bootstrap_external>", line 883, in exec_module
  File "<frozen importlib._bootstrap>", line 241, in _call_with_frames_removed
  File "/django_proj/aggregator/tasks.py", line 2, in <module>
    from aggregator.parse import silpo, rozetka, tavria
  File "/django_proj/aggregator/parse/silpo.py", line 2, in <module>
    import aiohttp
ModuleNotFoundError: No module named 'aiohttp'
ERROR 2024-03-30 18:47:37,422 signal 10 139705003165504 Signal handler <promise@0x7f0f99b76a20 --> <bound method Celery._autodiscover_tasks of <Celery backend at 0x7f0f99f8cac0>>> raised: ModuleNotFoundError("No module named 'aiohttp'")
Traceback (most recent call last):
  File "/usr/local/lib/python3.10/site-packages/celery/utils/dispatch/signal.py", line 276, in send
    response = receiver(signal=self, sender=sender, **named)
  File "/usr/local/lib/python3.10/site-packages/vine/promises.py", line 161, in __call__
    return self.throw()
  File "/usr/local/lib/python3.10/site-packages/vine/promises.py", line 158, in __call__
    retval = fun(*final_args, **final_kwargs)
  File "/usr/local/lib/python3.10/site-packages/celery/app/base.py", line 692, in _autodiscover_tasks
    return self._autodiscover_tasks_from_fixups(related_name)
  File "/usr/local/lib/python3.10/site-packages/celery/app/base.py", line 701, in _autodiscover_tasks_from_fixups
    return self._autodiscover_tasks_from_names([
  File "/usr/local/lib/python3.10/site-packages/celery/app/base.py", line 696, in _autodiscover_tasks_from_names
    return self.loader.autodiscover_tasks(
  File "/usr/local/lib/python3.10/site-packages/celery/loaders/base.py", line 220, in autodiscover_tasks
    mod.__name__ for mod in autodiscover_tasks(packages or (),
  File "/usr/local/lib/python3.10/site-packages/celery/loaders/base.py", line 246, in autodiscover_tasks
    return [find_related_module(pkg, related_name) for pkg in packages]
  File "/usr/local/lib/python3.10/site-packages/celery/loaders/base.py", line 246, in <listcomp>
    return [find_related_module(pkg, related_name) for pkg in packages]
  File "/usr/local/lib/python3.10/site-packages/celery/loaders/base.py", line 278, in find_related_module
    raise e
  File "/usr/local/lib/python3.10/site-packages/celery/loaders/base.py", line 270, in find_related_module
    return importlib.import_module(module_name)
  File "/usr/local/lib/python3.10/importlib/__init__.py", line 126, in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
  File "<frozen importlib._bootstrap>", line 1050, in _gcd_import
  File "<frozen importlib._bootstrap>", line 1027, in _find_and_load
  File "<frozen importlib._bootstrap>", line 1006, in _find_and_load_unlocked
  File "<frozen importlib._bootstrap>", line 688, in _load_unlocked
  File "<frozen importlib._bootstrap_external>", line 883, in exec_module
  File "<frozen importlib._bootstrap>", line 241, in _call_with_frames_removed
  File "/django_proj/aggregator/tasks.py", line 2, in <module>
    from aggregator.parse import silpo, rozetka, tavria
  File "/django_proj/aggregator/parse/silpo.py", line 2, in <module>
    import aiohttp
ModuleNotFoundError: No module named 'aiohttp'
ERROR 2024-03-30 18:47:37,450 signal 11 140651933439808 Signal handler <promise@0x7fec1329ea20 --> <bound method Celery._autodiscover_tasks of <Celery backend at 0x7fec1418e5c0>>> raised: ModuleNotFoundError("No module named 'aiohttp'")
Traceback (most recent call last):
  File "/usr/local/lib/python3.10/site-packages/celery/utils/dispatch/signal.py", line 276, in send
    response = receiver(signal=self, sender=sender, **named)
  File "/usr/local/lib/python3.10/site-packages/vine/promises.py", line 161, in __call__
    return self.throw()
  File "/usr/local/lib/python3.10/site-packages/vine/promises.py", line 158, in __call__
    retval = fun(*final_args, **final_kwargs)
  File "/usr/local/lib/python3.10/site-packages/celery/app/base.py", line 692, in _autodiscover_tasks
    return self._autodiscover_tasks_from_fixups(related_name)
  File "/usr/local/lib/python3.10/site-packages/celery/app/base.py", line 701, in _autodiscover_tasks_from_fixups
    return self._autodiscover_tasks_from_names([
  File "/usr/local/lib/python3.10/site-packages/celery/app/base.py", line 696, in _autodiscover_tasks_from_names
    return self.loader.autodiscover_tasks(
  File "/usr/local/lib/python3.10/site-packages/celery/loaders/base.py", line 220, in autodiscover_tasks
    mod.__name__ for mod in autodiscover_tasks(packages or (),
  File "/usr/local/lib/python3.10/site-packages/celery/loaders/base.py", line 246, in autodiscover_tasks
    return [find_related_module(pkg, related_name) for pkg in packages]
  File "/usr/local/lib/python3.10/site-packages/celery/loaders/base.py", line 246, in <listcomp>
    return [find_related_module(pkg, related_name) for pkg in packages]
  File "/usr/local/lib/python3.10/site-packages/celery/loaders/base.py", line 278, in find_related_module
    raise e
  File "/usr/local/lib/python3.10/site-packages/celery/loaders/base.py", line 270, in find_related_module
    return importlib.import_module(module_name)
  File "/usr/local/lib/python3.10/importlib/__init__.py", line 126, in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
  File "<frozen importlib._bootstrap>", line 1050, in _gcd_import
  File "<frozen importlib._bootstrap>", line 1027, in _find_and_load
  File "<frozen importlib._bootstrap>", line 1006, in _find_and_load_unlocked
  File "<frozen importlib._bootstrap>", line 688, in _load_unlocked
  File "<frozen importlib._bootstrap_external>", line 883, in exec_module
  File "<frozen importlib._bootstrap>", line 241, in _call_with_frames_removed
  File "/django_proj/aggregator/tasks.py", line 2, in <module>
    from aggregator.parse import silpo, rozetka, tavria
  File "/django_proj/aggregator/parse/silpo.py", line 2, in <module>
    import aiohttp
ModuleNotFoundError: No module named 'aiohttp'
INFO 2024-03-30 22:16:19,543 autoreload 23740 10424 Watching for file changes with StatReloader
